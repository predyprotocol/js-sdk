/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export type OrderInfoStruct = {
  market: PromiseOrValue<string>
  trader: PromiseOrValue<string>
  filler: PromiseOrValue<string>
  nonce: PromiseOrValue<BigNumberish>
  deadline: PromiseOrValue<BigNumberish>
}

export type OrderInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  market: string
  trader: string
  filler: string
  nonce: BigNumber
  deadline: BigNumber
}

export type PerpOrderStruct = {
  info: OrderInfoStruct
  positionId: PromiseOrValue<BigNumberish>
  pairId: PromiseOrValue<BigNumberish>
  entryTokenAddress: PromiseOrValue<string>
  tradeAmount: PromiseOrValue<BigNumberish>
  marginAmount: PromiseOrValue<BigNumberish>
  validatorAddress: PromiseOrValue<string>
  validationData: PromiseOrValue<BytesLike>
}

export type PerpOrderStructOutput = [
  OrderInfoStructOutput,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  info: OrderInfoStructOutput
  positionId: BigNumber
  pairId: BigNumber
  entryTokenAddress: string
  tradeAmount: BigNumber
  marginAmount: BigNumber
  validatorAddress: string
  validationData: string
}

export declare namespace PerpMarket {
  export type PerpTradeResultStruct = {
    entryUpdate: PromiseOrValue<BigNumberish>
    payoff: PromiseOrValue<BigNumberish>
  }

  export type PerpTradeResultStructOutput = [BigNumber, BigNumber] & {
    entryUpdate: BigNumber
    payoff: BigNumber
  }

  export type TotalPositionStruct = {
    totalLongAmount: PromiseOrValue<BigNumberish>
    totalShortAmount: PromiseOrValue<BigNumberish>
  }

  export type TotalPositionStructOutput = [BigNumber, BigNumber] & {
    totalLongAmount: BigNumber
    totalShortAmount: BigNumber
  }
}

export declare namespace ISettlement {
  export type SettlementDataStruct = {
    settlementContractAddress: PromiseOrValue<string>
    encodedData: PromiseOrValue<BytesLike>
  }

  export type SettlementDataStructOutput = [string, string] & {
    settlementContractAddress: string
    encodedData: string
  }
}

export declare namespace IFillerMarket {
  export type SignedOrderStruct = {
    order: PromiseOrValue<BytesLike>
    sig: PromiseOrValue<BytesLike>
  }

  export type SignedOrderStructOutput = [string, string] & {
    order: string
    sig: string
  }
}

export declare namespace IPredyPool {
  export type TradeParamsStruct = {
    pairId: PromiseOrValue<BigNumberish>
    vaultId: PromiseOrValue<BigNumberish>
    tradeAmount: PromiseOrValue<BigNumberish>
    tradeAmountSqrt: PromiseOrValue<BigNumberish>
    extraData: PromiseOrValue<BytesLike>
  }

  export type TradeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    pairId: BigNumber
    vaultId: BigNumber
    tradeAmount: BigNumber
    tradeAmountSqrt: BigNumber
    extraData: string
  }

  export type PayoffStruct = {
    perpEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateUnderlying: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateStable: PromiseOrValue<BigNumberish>
    perpPayoff: PromiseOrValue<BigNumberish>
    sqrtPayoff: PromiseOrValue<BigNumberish>
  }

  export type PayoffStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    perpEntryUpdate: BigNumber
    sqrtEntryUpdate: BigNumber
    sqrtRebalanceEntryUpdateUnderlying: BigNumber
    sqrtRebalanceEntryUpdateStable: BigNumber
    perpPayoff: BigNumber
    sqrtPayoff: BigNumber
  }

  export type TradeResultStruct = {
    payoff: IPredyPool.PayoffStruct
    vaultId: PromiseOrValue<BigNumberish>
    fee: PromiseOrValue<BigNumberish>
    minMargin: PromiseOrValue<BigNumberish>
    averagePrice: PromiseOrValue<BigNumberish>
    sqrtTwap: PromiseOrValue<BigNumberish>
    sqrtPrice: PromiseOrValue<BigNumberish>
  }

  export type TradeResultStructOutput = [
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payoff: IPredyPool.PayoffStructOutput
    vaultId: BigNumber
    fee: BigNumber
    minMargin: BigNumber
    averagePrice: BigNumber
    sqrtTwap: BigNumber
    sqrtPrice: BigNumber
  }
}

export interface PerpMarketInterface extends utils.Interface {
  functions: {
    'addFillerPool(uint256)': FunctionFragment
    'close(uint256)': FunctionFragment
    'confirmLiquidation(address,uint256)': FunctionFragment
    'depositMargin(uint256)': FunctionFragment
    'depositToInsurancePool(uint256,uint256)': FunctionFragment
    'execLiquidationCall(uint256,(address,bytes))': FunctionFragment
    'executeOrder((bytes,bytes),(address,bytes))': FunctionFragment
    'insurancePools(address,uint256)': FunctionFragment
    'positionCount()': FunctionFragment
    'predyTradeAfterCallback((uint256,uint256,int256,int256,bytes),((int256,int256,int256,int256,int256,int256),uint256,int256,int256,int256,uint256,uint256))': FunctionFragment
    'quoteExecuteOrder(((address,address,address,uint256,uint256),uint256,uint64,address,int256,int256,address,bytes),(address,bytes),address)': FunctionFragment
    'quoteUserPosition(uint256)': FunctionFragment
    'updateQuoteTokenMap(uint256)': FunctionFragment
    'userPositions(uint256)': FunctionFragment
    'withdrawFromInsurancePool(uint256,uint256)': FunctionFragment
    'withdrawMargin(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addFillerPool'
      | 'close'
      | 'confirmLiquidation'
      | 'depositMargin'
      | 'depositToInsurancePool'
      | 'execLiquidationCall'
      | 'executeOrder'
      | 'insurancePools'
      | 'positionCount'
      | 'predyTradeAfterCallback'
      | 'quoteExecuteOrder'
      | 'quoteUserPosition'
      | 'updateQuoteTokenMap'
      | 'userPositions'
      | 'withdrawFromInsurancePool'
      | 'withdrawMargin'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addFillerPool',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'close',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'confirmLiquidation',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'depositMargin',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'depositToInsurancePool',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'execLiquidationCall',
    values: [PromiseOrValue<BigNumberish>, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'executeOrder',
    values: [IFillerMarket.SignedOrderStruct, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'insurancePools',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'positionCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'predyTradeAfterCallback',
    values: [IPredyPool.TradeParamsStruct, IPredyPool.TradeResultStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'quoteExecuteOrder',
    values: [
      PerpOrderStruct,
      ISettlement.SettlementDataStruct,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'quoteUserPosition',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateQuoteTokenMap',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'userPositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFromInsurancePool',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawMargin',
    values: [PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(
    functionFragment: 'addFillerPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'confirmLiquidation',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositMargin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositToInsurancePool',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'execLiquidationCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'executeOrder',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'insurancePools',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'positionCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'predyTradeAfterCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'quoteExecuteOrder',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'quoteUserPosition',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateQuoteTokenMap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'userPositions',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFromInsurancePool',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawMargin',
    data: BytesLike
  ): Result

  events: {
    'FundingPayment(uint256,int256,int256)': EventFragment
    'PositionUpdated(uint256,int256,tuple)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'FundingPayment'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PositionUpdated'): EventFragment
}

export interface FundingPaymentEventObject {
  positionId: BigNumber
  fundingFee: BigNumber
  fillerFundingFee: BigNumber
}
export type FundingPaymentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FundingPaymentEventObject
>

export type FundingPaymentEventFilter = TypedEventFilter<FundingPaymentEvent>

export interface PositionUpdatedEventObject {
  positionId: BigNumber
  tradeAmount: BigNumber
  tradeResult: PerpMarket.PerpTradeResultStructOutput
}
export type PositionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, PerpMarket.PerpTradeResultStructOutput],
  PositionUpdatedEventObject
>

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>

export interface PerpMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PerpMarketInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addFillerPool(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    confirmLiquidation(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositToInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    execLiquidationCall(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    insurancePools(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        PerpMarket.TotalPositionStructOutput,
        boolean,
        BigNumber
      ] & {
        vaultId: BigNumber
        pairId: BigNumber
        fillerAddress: string
        marginAmount: BigNumber
        fillercumulativeFundingRates: BigNumber
        fundingRateGrobalGrowth: BigNumber
        lastFundingRateCalculationTime: BigNumber
        totalPosition: PerpMarket.TotalPositionStructOutput
        isLiquidated: boolean
        liquidationPrice: BigNumber
      }
    >

    positionCount(overrides?: CallOverrides): Promise<[BigNumber]>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteExecuteOrder(
      perpOrder: PerpOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      quoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteUserPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber
        pairId: BigNumber
        filler: string
        owner: string
        positionAmount: BigNumber
        entryValue: BigNumber
        marginAmount: BigNumber
        cumulativeFundingRates: BigNumber
      }
    >

    withdrawFromInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addFillerPool(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  close(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  confirmLiquidation(
    filler: PromiseOrValue<string>,
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositMargin(
    marginAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositToInsurancePool(
    pairId: PromiseOrValue<BigNumberish>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  execLiquidationCall(
    positionId: PromiseOrValue<BigNumberish>,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  executeOrder(
    order: IFillerMarket.SignedOrderStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  insurancePools(
    filler: PromiseOrValue<string>,
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      PerpMarket.TotalPositionStructOutput,
      boolean,
      BigNumber
    ] & {
      vaultId: BigNumber
      pairId: BigNumber
      fillerAddress: string
      marginAmount: BigNumber
      fillercumulativeFundingRates: BigNumber
      fundingRateGrobalGrowth: BigNumber
      lastFundingRateCalculationTime: BigNumber
      totalPosition: PerpMarket.TotalPositionStructOutput
      isLiquidated: boolean
      liquidationPrice: BigNumber
    }
  >

  positionCount(overrides?: CallOverrides): Promise<BigNumber>

  predyTradeAfterCallback(
    tradeParams: IPredyPool.TradeParamsStruct,
    tradeResult: IPredyPool.TradeResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  quoteExecuteOrder(
    perpOrder: PerpOrderStruct,
    settlementData: ISettlement.SettlementDataStruct,
    quoter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  quoteUserPosition(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateQuoteTokenMap(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  userPositions(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber
      pairId: BigNumber
      filler: string
      owner: string
      positionAmount: BigNumber
      entryValue: BigNumber
      marginAmount: BigNumber
      cumulativeFundingRates: BigNumber
    }
  >

  withdrawFromInsurancePool(
    pairId: PromiseOrValue<BigNumberish>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawMargin(
    marginAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addFillerPool(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PerpMarket.PerpTradeResultStructOutput>

    confirmLiquidation(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    depositMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    depositToInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    execLiquidationCall(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<void>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<PerpMarket.PerpTradeResultStructOutput>

    insurancePools(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        PerpMarket.TotalPositionStructOutput,
        boolean,
        BigNumber
      ] & {
        vaultId: BigNumber
        pairId: BigNumber
        fillerAddress: string
        marginAmount: BigNumber
        fillercumulativeFundingRates: BigNumber
        fundingRateGrobalGrowth: BigNumber
        lastFundingRateCalculationTime: BigNumber
        totalPosition: PerpMarket.TotalPositionStructOutput
        isLiquidated: boolean
        liquidationPrice: BigNumber
      }
    >

    positionCount(overrides?: CallOverrides): Promise<BigNumber>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<void>

    quoteExecuteOrder(
      perpOrder: PerpOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      quoter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    quoteUserPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber
        pairId: BigNumber
        filler: string
        owner: string
        positionAmount: BigNumber
        entryValue: BigNumber
        marginAmount: BigNumber
        cumulativeFundingRates: BigNumber
      }
    >

    withdrawFromInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'FundingPayment(uint256,int256,int256)'(
      positionId?: null,
      fundingFee?: null,
      fillerFundingFee?: null
    ): FundingPaymentEventFilter
    FundingPayment(
      positionId?: null,
      fundingFee?: null,
      fillerFundingFee?: null
    ): FundingPaymentEventFilter

    'PositionUpdated(uint256,int256,tuple)'(
      positionId?: null,
      tradeAmount?: null,
      tradeResult?: null
    ): PositionUpdatedEventFilter
    PositionUpdated(
      positionId?: null,
      tradeAmount?: null,
      tradeResult?: null
    ): PositionUpdatedEventFilter
  }

  estimateGas: {
    addFillerPool(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    confirmLiquidation(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositToInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    execLiquidationCall(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    insurancePools(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    positionCount(overrides?: CallOverrides): Promise<BigNumber>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    quoteExecuteOrder(
      perpOrder: PerpOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      quoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    quoteUserPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawFromInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addFillerPool(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    confirmLiquidation(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositToInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    execLiquidationCall(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    insurancePools(
      filler: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    positionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    quoteExecuteOrder(
      perpOrder: PerpOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      quoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    quoteUserPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdrawFromInsurancePool(
      pairId: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawMargin(
      marginAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export type OrderInfoStruct = {
  market: PromiseOrValue<string>
  trader: PromiseOrValue<string>
  nonce: PromiseOrValue<BigNumberish>
  deadline: PromiseOrValue<BigNumberish>
}

export type OrderInfoStructOutput = [string, string, BigNumber, BigNumber] & {
  market: string
  trader: string
  nonce: BigNumber
  deadline: BigNumber
}

export type PredictOrderStruct = {
  info: OrderInfoStruct
  pairId: PromiseOrValue<BigNumberish>
  duration: PromiseOrValue<BigNumberish>
  entryTokenAddress: PromiseOrValue<string>
  tradeAmount: PromiseOrValue<BigNumberish>
  tradeAmountSqrt: PromiseOrValue<BigNumberish>
  marginAmount: PromiseOrValue<BigNumberish>
  validatorAddress: PromiseOrValue<string>
  validationData: PromiseOrValue<BytesLike>
}

export type PredictOrderStructOutput = [
  OrderInfoStructOutput,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  info: OrderInfoStructOutput
  pairId: BigNumber
  duration: BigNumber
  entryTokenAddress: string
  tradeAmount: BigNumber
  tradeAmountSqrt: BigNumber
  marginAmount: BigNumber
  validatorAddress: string
  validationData: string
}

export declare namespace IPredyPool {
  export type PayoffStruct = {
    perpEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateUnderlying: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateStable: PromiseOrValue<BigNumberish>
    perpPayoff: PromiseOrValue<BigNumberish>
    sqrtPayoff: PromiseOrValue<BigNumberish>
  }

  export type PayoffStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    perpEntryUpdate: BigNumber
    sqrtEntryUpdate: BigNumber
    sqrtRebalanceEntryUpdateUnderlying: BigNumber
    sqrtRebalanceEntryUpdateStable: BigNumber
    perpPayoff: BigNumber
    sqrtPayoff: BigNumber
  }

  export type TradeResultStruct = {
    payoff: IPredyPool.PayoffStruct
    vaultId: PromiseOrValue<BigNumberish>
    fee: PromiseOrValue<BigNumberish>
    minMargin: PromiseOrValue<BigNumberish>
    averagePrice: PromiseOrValue<BigNumberish>
    sqrtTwap: PromiseOrValue<BigNumberish>
    sqrtPrice: PromiseOrValue<BigNumberish>
  }

  export type TradeResultStructOutput = [
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payoff: IPredyPool.PayoffStructOutput
    vaultId: BigNumber
    fee: BigNumber
    minMargin: BigNumber
    averagePrice: BigNumber
    sqrtTwap: BigNumber
    sqrtPrice: BigNumber
  }

  export type TradeParamsStruct = {
    pairId: PromiseOrValue<BigNumberish>
    vaultId: PromiseOrValue<BigNumberish>
    tradeAmount: PromiseOrValue<BigNumberish>
    tradeAmountSqrt: PromiseOrValue<BigNumberish>
    extraData: PromiseOrValue<BytesLike>
  }

  export type TradeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    pairId: BigNumber
    vaultId: BigNumber
    tradeAmount: BigNumber
    tradeAmountSqrt: BigNumber
    extraData: string
  }
}

export declare namespace ISettlement {
  export type SettlementDataStruct = {
    settlementContractAddress: PromiseOrValue<string>
    encodedData: PromiseOrValue<BytesLike>
  }

  export type SettlementDataStructOutput = [string, string] & {
    settlementContractAddress: string
    encodedData: string
  }
}

export declare namespace IFillerMarket {
  export type SignedOrderStruct = {
    order: PromiseOrValue<BytesLike>
    sig: PromiseOrValue<BytesLike>
  }

  export type SignedOrderStructOutput = [string, string] & {
    order: string
    sig: string
  }
}

export interface PredictMarketInterface extends utils.Interface {
  functions: {
    'closeAfterExpiration(uint256,(address,bytes))': FunctionFragment
    'executeOrder((bytes,bytes),(address,bytes))': FunctionFragment
    'owner()': FunctionFragment
    'predyTradeAfterCallback((uint256,uint256,int256,int256,bytes),((int256,int256,int256,int256,int256,int256),uint256,int256,int256,int256,uint256,uint256))': FunctionFragment
    'quoteExecuteOrder(((address,address,uint256,uint256),uint64,uint64,address,int256,int256,uint256,address,bytes),(address,bytes))': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'updateQuoteTokenMap(uint256)': FunctionFragment
    'updateWhitelistFiller(address)': FunctionFragment
    'userPositions(uint256)': FunctionFragment
    'whitelistFiller()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'closeAfterExpiration'
      | 'executeOrder'
      | 'owner'
      | 'predyTradeAfterCallback'
      | 'quoteExecuteOrder'
      | 'transferOwnership'
      | 'updateQuoteTokenMap'
      | 'updateWhitelistFiller'
      | 'userPositions'
      | 'whitelistFiller'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'closeAfterExpiration',
    values: [PromiseOrValue<BigNumberish>, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'executeOrder',
    values: [IFillerMarket.SignedOrderStruct, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'predyTradeAfterCallback',
    values: [IPredyPool.TradeParamsStruct, IPredyPool.TradeResultStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'quoteExecuteOrder',
    values: [PredictOrderStruct, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateQuoteTokenMap',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateWhitelistFiller',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'userPositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'whitelistFiller',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'closeAfterExpiration',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'executeOrder',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'predyTradeAfterCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'quoteExecuteOrder',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateQuoteTokenMap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateWhitelistFiller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'userPositions',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'whitelistFiller',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'PredictPositionClosed(uint256,uint256,tuple,int256)': EventFragment
    'PredictPositionOpened(uint256,address,uint256,uint256,tuple,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PredictPositionClosed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PredictPositionOpened'): EventFragment
}

export interface OwnershipTransferredEventObject {
  user: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PredictPositionClosedEventObject {
  vaultId: BigNumber
  closeValue: BigNumber
  payoff: IPredyPool.PayoffStructOutput
  fee: BigNumber
}
export type PredictPositionClosedEvent = TypedEvent<
  [BigNumber, BigNumber, IPredyPool.PayoffStructOutput, BigNumber],
  PredictPositionClosedEventObject
>

export type PredictPositionClosedEventFilter =
  TypedEventFilter<PredictPositionClosedEvent>

export interface PredictPositionOpenedEventObject {
  vaultId: BigNumber
  trader: string
  pairId: BigNumber
  openValue: BigNumber
  payoff: IPredyPool.PayoffStructOutput
  expiration: BigNumber
  duration: BigNumber
}
export type PredictPositionOpenedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber
  ],
  PredictPositionOpenedEventObject
>

export type PredictPositionOpenedEventFilter =
  TypedEventFilter<PredictPositionOpenedEvent>

export interface PredictMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PredictMarketInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    closeAfterExpiration(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteExecuteOrder(
      predictOrder: PredictOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    /**
     * Registers quote token address for the pair
     */
    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    /**
     * only owner can call this function
     * Updates the whitelist filler address
     */
    updateWhitelistFiller(
      newWhitelistFiller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; expiration: BigNumber }>

    whitelistFiller(overrides?: CallOverrides): Promise<[string]>
  }

  closeAfterExpiration(
    positionId: PromiseOrValue<BigNumberish>,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  executeOrder(
    order: IFillerMarket.SignedOrderStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  predyTradeAfterCallback(
    tradeParams: IPredyPool.TradeParamsStruct,
    tradeResult: IPredyPool.TradeResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  quoteExecuteOrder(
    predictOrder: PredictOrderStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  /**
   * Registers quote token address for the pair
   */
  updateQuoteTokenMap(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  /**
   * only owner can call this function
   * Updates the whitelist filler address
   */
  updateWhitelistFiller(
    newWhitelistFiller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  userPositions(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; expiration: BigNumber }>

  whitelistFiller(overrides?: CallOverrides): Promise<string>

  callStatic: {
    closeAfterExpiration(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>

    owner(overrides?: CallOverrides): Promise<string>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<void>

    quoteExecuteOrder(
      predictOrder: PredictOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    /**
     * Registers quote token address for the pair
     */
    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    /**
     * only owner can call this function
     * Updates the whitelist filler address
     */
    updateWhitelistFiller(
      newWhitelistFiller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; expiration: BigNumber }>

    whitelistFiller(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'PredictPositionClosed(uint256,uint256,tuple,int256)'(
      vaultId?: null,
      closeValue?: null,
      payoff?: null,
      fee?: null
    ): PredictPositionClosedEventFilter
    PredictPositionClosed(
      vaultId?: null,
      closeValue?: null,
      payoff?: null,
      fee?: null
    ): PredictPositionClosedEventFilter

    'PredictPositionOpened(uint256,address,uint256,uint256,tuple,uint256,uint256)'(
      vaultId?: PromiseOrValue<BigNumberish> | null,
      trader?: null,
      pairId?: null,
      openValue?: null,
      payoff?: null,
      expiration?: null,
      duration?: null
    ): PredictPositionOpenedEventFilter
    PredictPositionOpened(
      vaultId?: PromiseOrValue<BigNumberish> | null,
      trader?: null,
      pairId?: null,
      openValue?: null,
      payoff?: null,
      expiration?: null,
      duration?: null
    ): PredictPositionOpenedEventFilter
  }

  estimateGas: {
    closeAfterExpiration(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    quoteExecuteOrder(
      predictOrder: PredictOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    /**
     * Registers quote token address for the pair
     */
    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    /**
     * only owner can call this function
     * Updates the whitelist filler address
     */
    updateWhitelistFiller(
      newWhitelistFiller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    whitelistFiller(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    closeAfterExpiration(
      positionId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    executeOrder(
      order: IFillerMarket.SignedOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    predyTradeAfterCallback(
      tradeParams: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    quoteExecuteOrder(
      predictOrder: PredictOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    /**
     * Registers quote token address for the pair
     */
    updateQuoteTokenMap(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    /**
     * only owner can call this function
     * Updates the whitelist filler address
     */
    updateWhitelistFiller(
      newWhitelistFiller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    userPositions(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    whitelistFiller(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export declare namespace ISettlement {
  export type SettlementDataStruct = {
    settlementContractAddress: PromiseOrValue<string>
    encodedData: PromiseOrValue<BytesLike>
  }

  export type SettlementDataStructOutput = [string, string] & {
    settlementContractAddress: string
    encodedData: string
  }
}

export declare namespace IPredyPool {
  export type PayoffStruct = {
    perpEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateUnderlying: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateStable: PromiseOrValue<BigNumberish>
    perpPayoff: PromiseOrValue<BigNumberish>
    sqrtPayoff: PromiseOrValue<BigNumberish>
  }

  export type PayoffStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    perpEntryUpdate: BigNumber
    sqrtEntryUpdate: BigNumber
    sqrtRebalanceEntryUpdateUnderlying: BigNumber
    sqrtRebalanceEntryUpdateStable: BigNumber
    perpPayoff: BigNumber
    sqrtPayoff: BigNumber
  }

  export type TradeResultStruct = {
    payoff: IPredyPool.PayoffStruct
    vaultId: PromiseOrValue<BigNumberish>
    fee: PromiseOrValue<BigNumberish>
    minMargin: PromiseOrValue<BigNumberish>
    averagePrice: PromiseOrValue<BigNumberish>
    sqrtTwap: PromiseOrValue<BigNumberish>
    sqrtPrice: PromiseOrValue<BigNumberish>
  }

  export type TradeResultStructOutput = [
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payoff: IPredyPool.PayoffStructOutput
    vaultId: BigNumber
    fee: BigNumber
    minMargin: BigNumber
    averagePrice: BigNumber
    sqrtTwap: BigNumber
    sqrtPrice: BigNumber
  }

  export type TradeParamsStruct = {
    pairId: PromiseOrValue<BigNumberish>
    vaultId: PromiseOrValue<BigNumberish>
    tradeAmount: PromiseOrValue<BigNumberish>
    tradeAmountSqrt: PromiseOrValue<BigNumberish>
    extraData: PromiseOrValue<BytesLike>
  }

  export type TradeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    pairId: BigNumber
    vaultId: BigNumber
    tradeAmount: BigNumber
    tradeAmountSqrt: BigNumber
    extraData: string
  }
}

export declare namespace ScaledAsset {
  export type AssetStatusStruct = {
    totalCompoundDeposited: PromiseOrValue<BigNumberish>
    totalNormalDeposited: PromiseOrValue<BigNumberish>
    totalNormalBorrowed: PromiseOrValue<BigNumberish>
    assetScaler: PromiseOrValue<BigNumberish>
    assetGrowth: PromiseOrValue<BigNumberish>
    debtGrowth: PromiseOrValue<BigNumberish>
  }

  export type AssetStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalCompoundDeposited: BigNumber
    totalNormalDeposited: BigNumber
    totalNormalBorrowed: BigNumber
    assetScaler: BigNumber
    assetGrowth: BigNumber
    debtGrowth: BigNumber
  }

  export type UserStatusStruct = {
    positionAmount: PromiseOrValue<BigNumberish>
    lastFeeGrowth: PromiseOrValue<BigNumberish>
  }

  export type UserStatusStructOutput = [BigNumber, BigNumber] & {
    positionAmount: BigNumber
    lastFeeGrowth: BigNumber
  }
}

export declare namespace InterestRateModel {
  export type IRMParamsStruct = {
    baseRate: PromiseOrValue<BigNumberish>
    kinkRate: PromiseOrValue<BigNumberish>
    slope1: PromiseOrValue<BigNumberish>
    slope2: PromiseOrValue<BigNumberish>
  }

  export type IRMParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseRate: BigNumber
    kinkRate: BigNumber
    slope1: BigNumber
    slope2: BigNumber
  }
}

export declare namespace Perp {
  export type AssetPoolStatusStruct = {
    token: PromiseOrValue<string>
    supplyTokenAddress: PromiseOrValue<string>
    tokenStatus: ScaledAsset.AssetStatusStruct
    irmParams: InterestRateModel.IRMParamsStruct
    accumulatedProtocolRevenue: PromiseOrValue<BigNumberish>
    accumulatedCreatorRevenue: PromiseOrValue<BigNumberish>
  }

  export type AssetPoolStatusStructOutput = [
    string,
    string,
    ScaledAsset.AssetStatusStructOutput,
    InterestRateModel.IRMParamsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    token: string
    supplyTokenAddress: string
    tokenStatus: ScaledAsset.AssetStatusStructOutput
    irmParams: InterestRateModel.IRMParamsStructOutput
    accumulatedProtocolRevenue: BigNumber
    accumulatedCreatorRevenue: BigNumber
  }

  export type AssetRiskParamsStruct = {
    riskRatio: PromiseOrValue<BigNumberish>
    rangeSize: PromiseOrValue<BigNumberish>
    rebalanceThreshold: PromiseOrValue<BigNumberish>
    minSlippage: PromiseOrValue<BigNumberish>
    maxSlippage: PromiseOrValue<BigNumberish>
  }

  export type AssetRiskParamsStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    riskRatio: BigNumber
    rangeSize: number
    rebalanceThreshold: number
    minSlippage: BigNumber
    maxSlippage: BigNumber
  }

  export type SqrtPerpAssetStatusStruct = {
    uniswapPool: PromiseOrValue<string>
    tickLower: PromiseOrValue<BigNumberish>
    tickUpper: PromiseOrValue<BigNumberish>
    numRebalance: PromiseOrValue<BigNumberish>
    totalAmount: PromiseOrValue<BigNumberish>
    borrowedAmount: PromiseOrValue<BigNumberish>
    lastRebalanceTotalSquartAmount: PromiseOrValue<BigNumberish>
    lastFee0Growth: PromiseOrValue<BigNumberish>
    lastFee1Growth: PromiseOrValue<BigNumberish>
    borrowPremium0Growth: PromiseOrValue<BigNumberish>
    borrowPremium1Growth: PromiseOrValue<BigNumberish>
    fee0Growth: PromiseOrValue<BigNumberish>
    fee1Growth: PromiseOrValue<BigNumberish>
    rebalancePositionBase: ScaledAsset.UserStatusStruct
    rebalancePositionQuote: ScaledAsset.UserStatusStruct
    rebalanceInterestGrowthBase: PromiseOrValue<BigNumberish>
    rebalanceInterestGrowthQuote: PromiseOrValue<BigNumberish>
  }

  export type SqrtPerpAssetStatusStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    ScaledAsset.UserStatusStructOutput,
    ScaledAsset.UserStatusStructOutput,
    BigNumber,
    BigNumber
  ] & {
    uniswapPool: string
    tickLower: number
    tickUpper: number
    numRebalance: BigNumber
    totalAmount: BigNumber
    borrowedAmount: BigNumber
    lastRebalanceTotalSquartAmount: BigNumber
    lastFee0Growth: BigNumber
    lastFee1Growth: BigNumber
    borrowPremium0Growth: BigNumber
    borrowPremium1Growth: BigNumber
    fee0Growth: BigNumber
    fee1Growth: BigNumber
    rebalancePositionBase: ScaledAsset.UserStatusStructOutput
    rebalancePositionQuote: ScaledAsset.UserStatusStructOutput
    rebalanceInterestGrowthBase: BigNumber
    rebalanceInterestGrowthQuote: BigNumber
  }

  export type PositionStatusStruct = {
    amount: PromiseOrValue<BigNumberish>
    entryValue: PromiseOrValue<BigNumberish>
  }

  export type PositionStatusStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber
    entryValue: BigNumber
  }

  export type SqrtPositionStatusStruct = {
    amount: PromiseOrValue<BigNumberish>
    entryValue: PromiseOrValue<BigNumberish>
    quoteRebalanceEntryValue: PromiseOrValue<BigNumberish>
    baseRebalanceEntryValue: PromiseOrValue<BigNumberish>
    entryTradeFee0: PromiseOrValue<BigNumberish>
    entryTradeFee1: PromiseOrValue<BigNumberish>
  }

  export type SqrtPositionStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber
    entryValue: BigNumber
    quoteRebalanceEntryValue: BigNumber
    baseRebalanceEntryValue: BigNumber
    entryTradeFee0: BigNumber
    entryTradeFee1: BigNumber
  }

  export type UserStatusStruct = {
    pairId: PromiseOrValue<BigNumberish>
    rebalanceLastTickLower: PromiseOrValue<BigNumberish>
    rebalanceLastTickUpper: PromiseOrValue<BigNumberish>
    lastNumRebalance: PromiseOrValue<BigNumberish>
    perp: Perp.PositionStatusStruct
    sqrtPerp: Perp.SqrtPositionStatusStruct
    basePosition: ScaledAsset.UserStatusStruct
    stablePosition: ScaledAsset.UserStatusStruct
  }

  export type UserStatusStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    Perp.PositionStatusStructOutput,
    Perp.SqrtPositionStatusStructOutput,
    ScaledAsset.UserStatusStructOutput,
    ScaledAsset.UserStatusStructOutput
  ] & {
    pairId: BigNumber
    rebalanceLastTickLower: number
    rebalanceLastTickUpper: number
    lastNumRebalance: BigNumber
    perp: Perp.PositionStatusStructOutput
    sqrtPerp: Perp.SqrtPositionStatusStructOutput
    basePosition: ScaledAsset.UserStatusStructOutput
    stablePosition: ScaledAsset.UserStatusStructOutput
  }
}

export declare namespace DataType {
  export type PairStatusStruct = {
    id: PromiseOrValue<BigNumberish>
    marginId: PromiseOrValue<string>
    poolOwner: PromiseOrValue<string>
    quotePool: Perp.AssetPoolStatusStruct
    basePool: Perp.AssetPoolStatusStruct
    riskParams: Perp.AssetRiskParamsStruct
    sqrtAssetStatus: Perp.SqrtPerpAssetStatusStruct
    priceFeed: PromiseOrValue<string>
    isQuoteZero: PromiseOrValue<boolean>
    whitelistEnabled: PromiseOrValue<boolean>
    feeRatio: PromiseOrValue<BigNumberish>
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>
  }

  export type PairStatusStructOutput = [
    BigNumber,
    string,
    string,
    Perp.AssetPoolStatusStructOutput,
    Perp.AssetPoolStatusStructOutput,
    Perp.AssetRiskParamsStructOutput,
    Perp.SqrtPerpAssetStatusStructOutput,
    string,
    boolean,
    boolean,
    number,
    BigNumber
  ] & {
    id: BigNumber
    marginId: string
    poolOwner: string
    quotePool: Perp.AssetPoolStatusStructOutput
    basePool: Perp.AssetPoolStatusStructOutput
    riskParams: Perp.AssetRiskParamsStructOutput
    sqrtAssetStatus: Perp.SqrtPerpAssetStatusStructOutput
    priceFeed: string
    isQuoteZero: boolean
    whitelistEnabled: boolean
    feeRatio: number
    lastUpdateTimestamp: BigNumber
  }

  export type VaultStruct = {
    id: PromiseOrValue<BigNumberish>
    marginId: PromiseOrValue<string>
    owner: PromiseOrValue<string>
    recipient: PromiseOrValue<string>
    margin: PromiseOrValue<BigNumberish>
    openPosition: Perp.UserStatusStruct
  }

  export type VaultStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    Perp.UserStatusStructOutput
  ] & {
    id: BigNumber
    marginId: string
    owner: string
    recipient: string
    margin: BigNumber
    openPosition: Perp.UserStatusStructOutput
  }
}

export declare namespace LockDataLibrary {
  export type LockDataStruct = {
    locker: PromiseOrValue<string>
    quoteReserve: PromiseOrValue<BigNumberish>
    baseReserve: PromiseOrValue<BigNumberish>
    pairId: PromiseOrValue<BigNumberish>
  }

  export type LockDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    locker: string
    quoteReserve: BigNumber
    baseReserve: BigNumber
    pairId: BigNumber
  }
}

export declare namespace AddPairLogic {
  export type AddPairParamsStruct = {
    marginId: PromiseOrValue<string>
    poolOwner: PromiseOrValue<string>
    uniswapPool: PromiseOrValue<string>
    priceFeed: PromiseOrValue<string>
    whitelistEnabled: PromiseOrValue<boolean>
    fee: PromiseOrValue<BigNumberish>
    assetRiskParams: Perp.AssetRiskParamsStruct
    quoteIrmParams: InterestRateModel.IRMParamsStruct
    baseIrmParams: InterestRateModel.IRMParamsStruct
  }

  export type AddPairParamsStructOutput = [
    string,
    string,
    string,
    string,
    boolean,
    number,
    Perp.AssetRiskParamsStructOutput,
    InterestRateModel.IRMParamsStructOutput,
    InterestRateModel.IRMParamsStructOutput
  ] & {
    marginId: string
    poolOwner: string
    uniswapPool: string
    priceFeed: string
    whitelistEnabled: boolean
    fee: number
    assetRiskParams: Perp.AssetRiskParamsStructOutput
    quoteIrmParams: InterestRateModel.IRMParamsStructOutput
    baseIrmParams: InterestRateModel.IRMParamsStructOutput
  }
}

export interface PredyPoolInterface extends utils.Interface {
  functions: {
    'owner()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
    'addWhitelistAddress(uint256,address)': FunctionFragment
    'allowedTraders(address,uint256)': FunctionFragment
    'allowedUniswapPools(address)': FunctionFragment
    'createVault(uint256)': FunctionFragment
    'execLiquidationCall(uint256,uint256,(address,bytes))': FunctionFragment
    'getPairStatus(uint256)': FunctionFragment
    'getSqrtIndexPrice(uint256)': FunctionFragment
    'getSqrtPrice(uint256)': FunctionFragment
    'getVault(uint256)': FunctionFragment
    'globalData()': FunctionFragment
    'initialize(address)': FunctionFragment
    'operator()': FunctionFragment
    'reallocate(uint256,(address,bytes))': FunctionFragment
    'registerPair((address,address,address,address,bool,uint8,(uint256,int24,int24,uint64,uint64),(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256)))': FunctionFragment
    'revertPairStatus(uint256)': FunctionFragment
    'revertVaultStatus(uint256)': FunctionFragment
    'setOperator(address)': FunctionFragment
    'supply(uint256,bool,uint256)': FunctionFragment
    'take(bool,address,uint256)': FunctionFragment
    'trade((uint256,uint256,int256,int256,bytes),(address,bytes))': FunctionFragment
    'uniswapV3MintCallback(uint256,uint256,bytes)': FunctionFragment
    'updateAssetRiskParams(uint256,(uint256,int24,int24,uint64,uint64))': FunctionFragment
    'updateFeeRatio(uint256,uint8)': FunctionFragment
    'updateIRMParams(uint256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))': FunctionFragment
    'updatePoolOwner(uint256,address)': FunctionFragment
    'updateRecepient(uint256,address)': FunctionFragment
    'withdraw(uint256,bool,uint256)': FunctionFragment
    'withdrawCreatorRevenue(uint256,bool)': FunctionFragment
    'withdrawProtocolRevenue(uint256,bool)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'owner'
      | 'supportsInterface'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'addWhitelistAddress'
      | 'allowedTraders'
      | 'allowedUniswapPools'
      | 'createVault'
      | 'execLiquidationCall'
      | 'getPairStatus'
      | 'getSqrtIndexPrice'
      | 'getSqrtPrice'
      | 'getVault'
      | 'globalData'
      | 'initialize'
      | 'operator'
      | 'reallocate'
      | 'registerPair'
      | 'revertPairStatus'
      | 'revertVaultStatus'
      | 'setOperator'
      | 'supply'
      | 'take'
      | 'trade'
      | 'uniswapV3MintCallback'
      | 'updateAssetRiskParams'
      | 'updateFeeRatio'
      | 'updateIRMParams'
      | 'updatePoolOwner'
      | 'updateRecepient'
      | 'withdraw'
      | 'withdrawCreatorRevenue'
      | 'withdrawProtocolRevenue'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'addWhitelistAddress',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'allowedTraders',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'allowedUniswapPools',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'createVault',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'execLiquidationCall',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ISettlement.SettlementDataStruct
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getPairStatus',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtIndexPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getVault',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'globalData', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'reallocate',
    values: [PromiseOrValue<BigNumberish>, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'registerPair',
    values: [AddPairLogic.AddPairParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'revertPairStatus',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'revertVaultStatus',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setOperator',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'supply',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'take',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'trade',
    values: [IPredyPool.TradeParamsStruct, ISettlement.SettlementDataStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'uniswapV3MintCallback',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updateAssetRiskParams',
    values: [PromiseOrValue<BigNumberish>, Perp.AssetRiskParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'updateFeeRatio',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateIRMParams',
    values: [
      PromiseOrValue<BigNumberish>,
      InterestRateModel.IRMParamsStruct,
      InterestRateModel.IRMParamsStruct
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updatePoolOwner',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateRecepient',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawCreatorRevenue',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawProtocolRevenue',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string

  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addWhitelistAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowedTraders',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowedUniswapPools',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'createVault', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'execLiquidationCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPairStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtIndexPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'globalData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reallocate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'registerPair',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'revertPairStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'revertVaultStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'take', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'trade', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'uniswapV3MintCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateAssetRiskParams',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateFeeRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateIRMParams',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePoolOwner',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateRecepient',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawCreatorRevenue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolRevenue',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'ProxyImplementationUpdated(address,address)': EventFragment
    'CreatorRevenueWithdrawn(uint256,bool,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'OperatorUpdated(address)': EventFragment
    'ProtocolRevenueWithdrawn(uint256,bool,uint256)': EventFragment
    'RecepientUpdated(uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProxyImplementationUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreatorRevenueWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OperatorUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProtocolRevenueWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RecepientUpdated'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface ProxyImplementationUpdatedEventObject {
  previousImplementation: string
  newImplementation: string
}
export type ProxyImplementationUpdatedEvent = TypedEvent<
  [string, string],
  ProxyImplementationUpdatedEventObject
>

export type ProxyImplementationUpdatedEventFilter =
  TypedEventFilter<ProxyImplementationUpdatedEvent>

export interface CreatorRevenueWithdrawnEventObject {
  pairId: BigNumber
  isStable: boolean
  amount: BigNumber
}
export type CreatorRevenueWithdrawnEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  CreatorRevenueWithdrawnEventObject
>

export type CreatorRevenueWithdrawnEventFilter =
  TypedEventFilter<CreatorRevenueWithdrawnEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface OperatorUpdatedEventObject {
  operator: string
}
export type OperatorUpdatedEvent = TypedEvent<
  [string],
  OperatorUpdatedEventObject
>

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>

export interface ProtocolRevenueWithdrawnEventObject {
  pairId: BigNumber
  isStable: boolean
  amount: BigNumber
}
export type ProtocolRevenueWithdrawnEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  ProtocolRevenueWithdrawnEventObject
>

export type ProtocolRevenueWithdrawnEventFilter =
  TypedEventFilter<ProtocolRevenueWithdrawnEvent>

export interface RecepientUpdatedEventObject {
  vaultId: BigNumber
  recipient: string
}
export type RecepientUpdatedEvent = TypedEvent<
  [BigNumber, string],
  RecepientUpdatedEventObject
>

export type RecepientUpdatedEventFilter =
  TypedEventFilter<RecepientUpdatedEvent>

export interface PredyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PredyPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>

    supportsInterface(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    addWhitelistAddress(
      pairId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    allowedTraders(
      trader: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    allowedUniswapPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    createVault(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    execLiquidationCall(
      vaultId: PromiseOrValue<BigNumberish>,
      closeRatio: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataType.PairStatusStructOutput]>

    getSqrtIndexPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getSqrtPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataType.VaultStructOutput]>

    globalData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, LockDataLibrary.LockDataStructOutput] & {
        pairsCount: BigNumber
        vaultCount: BigNumber
        uniswapFactory: string
        lockData: LockDataLibrary.LockDataStructOutput
      }
    >

    initialize(
      uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    operator(overrides?: CallOverrides): Promise<[string]>

    reallocate(
      pairId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    registerPair(
      addPairParam: AddPairLogic.AddPairParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revertPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revertVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supply(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    take(
      isQuoteAsset: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    trade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateAssetRiskParams(
      pairId: PromiseOrValue<BigNumberish>,
      riskParams: Perp.AssetRiskParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateFeeRatio(
      pairId: PromiseOrValue<BigNumberish>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateIRMParams(
      pairId: PromiseOrValue<BigNumberish>,
      quoteIrmParams: InterestRateModel.IRMParamsStruct,
      baseIrmParams: InterestRateModel.IRMParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updatePoolOwner(
      pairId: PromiseOrValue<BigNumberish>,
      poolOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateRecepient(
      vaultId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawCreatorRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawProtocolRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  owner(overrides?: CallOverrides): Promise<string>

  supportsInterface(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  addWhitelistAddress(
    pairId: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  allowedTraders(
    trader: PromiseOrValue<string>,
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>

  allowedUniswapPools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  createVault(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  execLiquidationCall(
    vaultId: PromiseOrValue<BigNumberish>,
    closeRatio: PromiseOrValue<BigNumberish>,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getPairStatus(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataType.PairStatusStructOutput>

  getSqrtIndexPrice(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getSqrtPrice(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getVault(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataType.VaultStructOutput>

  globalData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, string, LockDataLibrary.LockDataStructOutput] & {
      pairsCount: BigNumber
      vaultCount: BigNumber
      uniswapFactory: string
      lockData: LockDataLibrary.LockDataStructOutput
    }
  >

  initialize(
    uniswapFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  operator(overrides?: CallOverrides): Promise<string>

  reallocate(
    pairId: PromiseOrValue<BigNumberish>,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  registerPair(
    addPairParam: AddPairLogic.AddPairParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revertPairStatus(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revertVaultStatus(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setOperator(
    newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supply(
    pairId: PromiseOrValue<BigNumberish>,
    isQuoteAsset: PromiseOrValue<boolean>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  take(
    isQuoteAsset: PromiseOrValue<boolean>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  trade(
    tradeParams: IPredyPool.TradeParamsStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  uniswapV3MintCallback(
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateAssetRiskParams(
    pairId: PromiseOrValue<BigNumberish>,
    riskParams: Perp.AssetRiskParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateFeeRatio(
    pairId: PromiseOrValue<BigNumberish>,
    feeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateIRMParams(
    pairId: PromiseOrValue<BigNumberish>,
    quoteIrmParams: InterestRateModel.IRMParamsStruct,
    baseIrmParams: InterestRateModel.IRMParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updatePoolOwner(
    pairId: PromiseOrValue<BigNumberish>,
    poolOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateRecepient(
    vaultId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    pairId: PromiseOrValue<BigNumberish>,
    isQuoteAsset: PromiseOrValue<boolean>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawCreatorRevenue(
    pairId: PromiseOrValue<BigNumberish>,
    isQuoteToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawProtocolRevenue(
    pairId: PromiseOrValue<BigNumberish>,
    isQuoteToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>

    supportsInterface(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    addWhitelistAddress(
      pairId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    allowedTraders(
      trader: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    allowedUniswapPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    createVault(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    execLiquidationCall(
      vaultId: PromiseOrValue<BigNumberish>,
      closeRatio: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>

    getPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataType.PairStatusStructOutput>

    getSqrtIndexPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataType.VaultStructOutput>

    globalData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, LockDataLibrary.LockDataStructOutput] & {
        pairsCount: BigNumber
        vaultCount: BigNumber
        uniswapFactory: string
        lockData: LockDataLibrary.LockDataStructOutput
      }
    >

    initialize(
      uniswapFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    operator(overrides?: CallOverrides): Promise<string>

    reallocate(
      pairId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>

    registerPair(
      addPairParam: AddPairLogic.AddPairParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    revertPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    revertVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    supply(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    take(
      isQuoteAsset: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    trade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    updateAssetRiskParams(
      pairId: PromiseOrValue<BigNumberish>,
      riskParams: Perp.AssetRiskParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    updateFeeRatio(
      pairId: PromiseOrValue<BigNumberish>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    updateIRMParams(
      pairId: PromiseOrValue<BigNumberish>,
      quoteIrmParams: InterestRateModel.IRMParamsStruct,
      baseIrmParams: InterestRateModel.IRMParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    updatePoolOwner(
      pairId: PromiseOrValue<BigNumberish>,
      poolOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    updateRecepient(
      vaultId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        finalBurnAmount: BigNumber
        finalWithdrawAmount: BigNumber
      }
    >

    withdrawCreatorRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawProtocolRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'ProxyImplementationUpdated(address,address)'(
      previousImplementation?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyImplementationUpdatedEventFilter
    ProxyImplementationUpdated(
      previousImplementation?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyImplementationUpdatedEventFilter

    'CreatorRevenueWithdrawn(uint256,bool,uint256)'(
      pairId?: null,
      isStable?: null,
      amount?: null
    ): CreatorRevenueWithdrawnEventFilter
    CreatorRevenueWithdrawn(
      pairId?: null,
      isStable?: null,
      amount?: null
    ): CreatorRevenueWithdrawnEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'OperatorUpdated(address)'(operator?: null): OperatorUpdatedEventFilter
    OperatorUpdated(operator?: null): OperatorUpdatedEventFilter

    'ProtocolRevenueWithdrawn(uint256,bool,uint256)'(
      pairId?: null,
      isStable?: null,
      amount?: null
    ): ProtocolRevenueWithdrawnEventFilter
    ProtocolRevenueWithdrawn(
      pairId?: null,
      isStable?: null,
      amount?: null
    ): ProtocolRevenueWithdrawnEventFilter

    'RecepientUpdated(uint256,address)'(
      vaultId?: null,
      recipient?: null
    ): RecepientUpdatedEventFilter
    RecepientUpdated(
      vaultId?: null,
      recipient?: null
    ): RecepientUpdatedEventFilter
  }

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    addWhitelistAddress(
      pairId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    allowedTraders(
      trader: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    allowedUniswapPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createVault(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    execLiquidationCall(
      vaultId: PromiseOrValue<BigNumberish>,
      closeRatio: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtIndexPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    globalData(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    operator(overrides?: CallOverrides): Promise<BigNumber>

    reallocate(
      pairId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    registerPair(
      addPairParam: AddPairLogic.AddPairParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revertPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revertVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supply(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    take(
      isQuoteAsset: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    trade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateAssetRiskParams(
      pairId: PromiseOrValue<BigNumberish>,
      riskParams: Perp.AssetRiskParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateFeeRatio(
      pairId: PromiseOrValue<BigNumberish>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateIRMParams(
      pairId: PromiseOrValue<BigNumberish>,
      quoteIrmParams: InterestRateModel.IRMParamsStruct,
      baseIrmParams: InterestRateModel.IRMParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updatePoolOwner(
      pairId: PromiseOrValue<BigNumberish>,
      poolOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateRecepient(
      vaultId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawCreatorRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawProtocolRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    addWhitelistAddress(
      pairId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    allowedTraders(
      trader: PromiseOrValue<string>,
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowedUniswapPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createVault(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    execLiquidationCall(
      vaultId: PromiseOrValue<BigNumberish>,
      closeRatio: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSqrtIndexPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSqrtPrice(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    globalData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    reallocate(
      pairId: PromiseOrValue<BigNumberish>,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    registerPair(
      addPairParam: AddPairLogic.AddPairParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revertPairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revertVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supply(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    take(
      isQuoteAsset: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    trade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateAssetRiskParams(
      pairId: PromiseOrValue<BigNumberish>,
      riskParams: Perp.AssetRiskParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateFeeRatio(
      pairId: PromiseOrValue<BigNumberish>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateIRMParams(
      pairId: PromiseOrValue<BigNumberish>,
      quoteIrmParams: InterestRateModel.IRMParamsStruct,
      baseIrmParams: InterestRateModel.IRMParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updatePoolOwner(
      pairId: PromiseOrValue<BigNumberish>,
      poolOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateRecepient(
      vaultId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteAsset: PromiseOrValue<boolean>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawCreatorRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawProtocolRevenue(
      pairId: PromiseOrValue<BigNumberish>,
      isQuoteToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}

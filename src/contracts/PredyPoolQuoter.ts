/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPredyPool {
  export type TradeParamsStruct = {
    pairId: PromiseOrValue<BigNumberish>;
    vaultId: PromiseOrValue<BigNumberish>;
    tradeAmount: PromiseOrValue<BigNumberish>;
    tradeAmountSqrt: PromiseOrValue<BigNumberish>;
    extraData: PromiseOrValue<BytesLike>;
  };

  export type TradeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    pairId: BigNumber;
    vaultId: BigNumber;
    tradeAmount: BigNumber;
    tradeAmountSqrt: BigNumber;
    extraData: string;
  };

  export type PayoffStruct = {
    perpEntryUpdate: PromiseOrValue<BigNumberish>;
    sqrtEntryUpdate: PromiseOrValue<BigNumberish>;
    sqrtRebalanceEntryUpdateUnderlying: PromiseOrValue<BigNumberish>;
    sqrtRebalanceEntryUpdateStable: PromiseOrValue<BigNumberish>;
    perpPayoff: PromiseOrValue<BigNumberish>;
    sqrtPayoff: PromiseOrValue<BigNumberish>;
  };

  export type PayoffStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    perpEntryUpdate: BigNumber;
    sqrtEntryUpdate: BigNumber;
    sqrtRebalanceEntryUpdateUnderlying: BigNumber;
    sqrtRebalanceEntryUpdateStable: BigNumber;
    perpPayoff: BigNumber;
    sqrtPayoff: BigNumber;
  };

  export type TradeResultStruct = {
    payoff: IPredyPool.PayoffStruct;
    vaultId: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    minMargin: PromiseOrValue<BigNumberish>;
    averagePrice: PromiseOrValue<BigNumberish>;
    sqrtTwap: PromiseOrValue<BigNumberish>;
    sqrtPrice: PromiseOrValue<BigNumberish>;
  };

  export type TradeResultStructOutput = [
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payoff: IPredyPool.PayoffStructOutput;
    vaultId: BigNumber;
    fee: BigNumber;
    minMargin: BigNumber;
    averagePrice: BigNumber;
    sqrtTwap: BigNumber;
    sqrtPrice: BigNumber;
  };

  export type VaultStatusStruct = {
    id: PromiseOrValue<BigNumberish>;
    vaultValue: PromiseOrValue<BigNumberish>;
    minMargin: PromiseOrValue<BigNumberish>;
    oraclePrice: PromiseOrValue<BigNumberish>;
    FeeAmount: DataType.FeeAmountStruct;
  };

  export type VaultStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    DataType.FeeAmountStructOutput
  ] & {
    id: BigNumber;
    vaultValue: BigNumber;
    minMargin: BigNumber;
    oraclePrice: BigNumber;
    FeeAmount: DataType.FeeAmountStructOutput;
  };
}

export declare namespace ScaledAsset {
  export type AssetStatusStruct = {
    totalCompoundDeposited: PromiseOrValue<BigNumberish>;
    totalNormalDeposited: PromiseOrValue<BigNumberish>;
    totalNormalBorrowed: PromiseOrValue<BigNumberish>;
    assetScaler: PromiseOrValue<BigNumberish>;
    assetGrowth: PromiseOrValue<BigNumberish>;
    debtGrowth: PromiseOrValue<BigNumberish>;
  };

  export type AssetStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalCompoundDeposited: BigNumber;
    totalNormalDeposited: BigNumber;
    totalNormalBorrowed: BigNumber;
    assetScaler: BigNumber;
    assetGrowth: BigNumber;
    debtGrowth: BigNumber;
  };

  export type UserStatusStruct = {
    positionAmount: PromiseOrValue<BigNumberish>;
    lastFeeGrowth: PromiseOrValue<BigNumberish>;
  };

  export type UserStatusStructOutput = [BigNumber, BigNumber] & {
    positionAmount: BigNumber;
    lastFeeGrowth: BigNumber;
  };
}

export declare namespace InterestRateModel {
  export type IRMParamsStruct = {
    baseRate: PromiseOrValue<BigNumberish>;
    kinkRate: PromiseOrValue<BigNumberish>;
    slope1: PromiseOrValue<BigNumberish>;
    slope2: PromiseOrValue<BigNumberish>;
  };

  export type IRMParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseRate: BigNumber;
    kinkRate: BigNumber;
    slope1: BigNumber;
    slope2: BigNumber;
  };
}

export declare namespace Perp {
  export type AssetPoolStatusStruct = {
    token: PromiseOrValue<string>;
    supplyTokenAddress: PromiseOrValue<string>;
    tokenStatus: ScaledAsset.AssetStatusStruct;
    irmParams: InterestRateModel.IRMParamsStruct;
    accumulatedProtocolRevenue: PromiseOrValue<BigNumberish>;
    accumulatedCreatorRevenue: PromiseOrValue<BigNumberish>;
  };

  export type AssetPoolStatusStructOutput = [
    string,
    string,
    ScaledAsset.AssetStatusStructOutput,
    InterestRateModel.IRMParamsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    token: string;
    supplyTokenAddress: string;
    tokenStatus: ScaledAsset.AssetStatusStructOutput;
    irmParams: InterestRateModel.IRMParamsStructOutput;
    accumulatedProtocolRevenue: BigNumber;
    accumulatedCreatorRevenue: BigNumber;
  };

  export type AssetRiskParamsStruct = {
    riskRatio: PromiseOrValue<BigNumberish>;
    rangeSize: PromiseOrValue<BigNumberish>;
    rebalanceThreshold: PromiseOrValue<BigNumberish>;
    minSlippage: PromiseOrValue<BigNumberish>;
    maxSlippage: PromiseOrValue<BigNumberish>;
  };

  export type AssetRiskParamsStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    riskRatio: BigNumber;
    rangeSize: number;
    rebalanceThreshold: number;
    minSlippage: BigNumber;
    maxSlippage: BigNumber;
  };

  export type SqrtPerpAssetStatusStruct = {
    uniswapPool: PromiseOrValue<string>;
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
    numRebalance: PromiseOrValue<BigNumberish>;
    totalAmount: PromiseOrValue<BigNumberish>;
    borrowedAmount: PromiseOrValue<BigNumberish>;
    lastRebalanceTotalSquartAmount: PromiseOrValue<BigNumberish>;
    lastFee0Growth: PromiseOrValue<BigNumberish>;
    lastFee1Growth: PromiseOrValue<BigNumberish>;
    borrowPremium0Growth: PromiseOrValue<BigNumberish>;
    borrowPremium1Growth: PromiseOrValue<BigNumberish>;
    fee0Growth: PromiseOrValue<BigNumberish>;
    fee1Growth: PromiseOrValue<BigNumberish>;
    rebalancePositionBase: ScaledAsset.UserStatusStruct;
    rebalancePositionQuote: ScaledAsset.UserStatusStruct;
    rebalanceInterestGrowthBase: PromiseOrValue<BigNumberish>;
    rebalanceInterestGrowthQuote: PromiseOrValue<BigNumberish>;
  };

  export type SqrtPerpAssetStatusStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    ScaledAsset.UserStatusStructOutput,
    ScaledAsset.UserStatusStructOutput,
    BigNumber,
    BigNumber
  ] & {
    uniswapPool: string;
    tickLower: number;
    tickUpper: number;
    numRebalance: BigNumber;
    totalAmount: BigNumber;
    borrowedAmount: BigNumber;
    lastRebalanceTotalSquartAmount: BigNumber;
    lastFee0Growth: BigNumber;
    lastFee1Growth: BigNumber;
    borrowPremium0Growth: BigNumber;
    borrowPremium1Growth: BigNumber;
    fee0Growth: BigNumber;
    fee1Growth: BigNumber;
    rebalancePositionBase: ScaledAsset.UserStatusStructOutput;
    rebalancePositionQuote: ScaledAsset.UserStatusStructOutput;
    rebalanceInterestGrowthBase: BigNumber;
    rebalanceInterestGrowthQuote: BigNumber;
  };
}

export declare namespace DataType {
  export type PairStatusStruct = {
    id: PromiseOrValue<BigNumberish>;
    marginId: PromiseOrValue<string>;
    poolOwner: PromiseOrValue<string>;
    quotePool: Perp.AssetPoolStatusStruct;
    basePool: Perp.AssetPoolStatusStruct;
    riskParams: Perp.AssetRiskParamsStruct;
    sqrtAssetStatus: Perp.SqrtPerpAssetStatusStruct;
    priceFeed: PromiseOrValue<string>;
    isQuoteZero: PromiseOrValue<boolean>;
    whitelistEnabled: PromiseOrValue<boolean>;
    feeRatio: PromiseOrValue<BigNumberish>;
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type PairStatusStructOutput = [
    BigNumber,
    string,
    string,
    Perp.AssetPoolStatusStructOutput,
    Perp.AssetPoolStatusStructOutput,
    Perp.AssetRiskParamsStructOutput,
    Perp.SqrtPerpAssetStatusStructOutput,
    string,
    boolean,
    boolean,
    number,
    BigNumber
  ] & {
    id: BigNumber;
    marginId: string;
    poolOwner: string;
    quotePool: Perp.AssetPoolStatusStructOutput;
    basePool: Perp.AssetPoolStatusStructOutput;
    riskParams: Perp.AssetRiskParamsStructOutput;
    sqrtAssetStatus: Perp.SqrtPerpAssetStatusStructOutput;
    priceFeed: string;
    isQuoteZero: boolean;
    whitelistEnabled: boolean;
    feeRatio: number;
    lastUpdateTimestamp: BigNumber;
  };

  export type FeeAmountStruct = {
    feeAmountBase: PromiseOrValue<BigNumberish>;
    feeAmountQuote: PromiseOrValue<BigNumberish>;
  };

  export type FeeAmountStructOutput = [BigNumber, BigNumber] & {
    feeAmountBase: BigNumber;
    feeAmountQuote: BigNumber;
  };
}

export declare namespace ISettlement {
  export type SettlementDataStruct = {
    settlementContractAddress: PromiseOrValue<string>;
    encodedData: PromiseOrValue<BytesLike>;
  };

  export type SettlementDataStructOutput = [string, string] & {
    settlementContractAddress: string;
    encodedData: string;
  };
}

export interface PredyPoolQuoterInterface extends utils.Interface {
  functions: {
    "predyTradeAfterCallback((uint256,uint256,int256,int256,bytes),((int256,int256,int256,int256,int256,int256),uint256,int256,int256,int256,uint256,uint256))": FunctionFragment;
    "quoteBaseAmountDelta((uint256,uint256,int256,int256,bytes))": FunctionFragment;
    "quotePairStatus(uint256)": FunctionFragment;
    "quoteTrade((uint256,uint256,int256,int256,bytes),(address,bytes))": FunctionFragment;
    "quoteVaultStatus(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "predyTradeAfterCallback"
      | "quoteBaseAmountDelta"
      | "quotePairStatus"
      | "quoteTrade"
      | "quoteVaultStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "predyTradeAfterCallback",
    values: [IPredyPool.TradeParamsStruct, IPredyPool.TradeResultStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBaseAmountDelta",
    values: [IPredyPool.TradeParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePairStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTrade",
    values: [IPredyPool.TradeParamsStruct, ISettlement.SettlementDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteVaultStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "predyTradeAfterCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBaseAmountDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteVaultStatus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PredyPoolQuoter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredyPoolQuoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    quoteBaseAmountDelta(
      tradeParams: IPredyPool.TradeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quotePairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteTrade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  predyTradeAfterCallback(
    arg0: IPredyPool.TradeParamsStruct,
    tradeResult: IPredyPool.TradeResultStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  quoteBaseAmountDelta(
    tradeParams: IPredyPool.TradeParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quotePairStatus(
    pairId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteTrade(
    tradeParams: IPredyPool.TradeParamsStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteVaultStatus(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteBaseAmountDelta(
      tradeParams: IPredyPool.TradeParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataType.PairStatusStructOutput>;

    quoteTrade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>;

    quoteVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPredyPool.VaultStatusStructOutput>;
  };

  filters: {};

  estimateGas: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBaseAmountDelta(
      tradeParams: IPredyPool.TradeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quotePairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteTrade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBaseAmountDelta(
      tradeParams: IPredyPool.TradeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quotePairStatus(
      pairId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteTrade(
      tradeParams: IPredyPool.TradeParamsStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteVaultStatus(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

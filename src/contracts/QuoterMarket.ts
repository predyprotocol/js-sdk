/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue
} from './common'

export type OrderInfoStruct = {
  market: PromiseOrValue<string>
  trader: PromiseOrValue<string>
  nonce: PromiseOrValue<BigNumberish>
  deadline: PromiseOrValue<BigNumberish>
}

export type OrderInfoStructOutput = [string, string, BigNumber, BigNumber] & {
  market: string
  trader: string
  nonce: BigNumber
  deadline: BigNumber
}

export type GeneralOrderStruct = {
  info: OrderInfoStruct
  positionId: PromiseOrValue<BigNumberish>
  pairId: PromiseOrValue<BigNumberish>
  tradeAmount: PromiseOrValue<BigNumberish>
  tradeAmountSqrt: PromiseOrValue<BigNumberish>
  marginAmount: PromiseOrValue<BigNumberish>
  marginRatio: PromiseOrValue<BigNumberish>
  validatorAddress: PromiseOrValue<string>
  validationData: PromiseOrValue<BytesLike>
}

export type GeneralOrderStructOutput = [
  OrderInfoStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  info: OrderInfoStructOutput
  positionId: BigNumber
  pairId: BigNumber
  tradeAmount: BigNumber
  tradeAmountSqrt: BigNumber
  marginAmount: BigNumber
  marginRatio: BigNumber
  validatorAddress: string
  validationData: string
}

export declare namespace IPredyPool {
  export type TradeParamsStruct = {
    pairId: PromiseOrValue<BigNumberish>
    vaultId: PromiseOrValue<BigNumberish>
    tradeAmount: PromiseOrValue<BigNumberish>
    tradeAmountSqrt: PromiseOrValue<BigNumberish>
    extraData: PromiseOrValue<BytesLike>
  }

  export type TradeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    pairId: BigNumber
    vaultId: BigNumber
    tradeAmount: BigNumber
    tradeAmountSqrt: BigNumber
    extraData: string
  }

  export type PayoffStruct = {
    perpEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtEntryUpdate: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateUnderlying: PromiseOrValue<BigNumberish>
    sqrtRebalanceEntryUpdateStable: PromiseOrValue<BigNumberish>
    perpPayoff: PromiseOrValue<BigNumberish>
    sqrtPayoff: PromiseOrValue<BigNumberish>
  }

  export type PayoffStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    perpEntryUpdate: BigNumber
    sqrtEntryUpdate: BigNumber
    sqrtRebalanceEntryUpdateUnderlying: BigNumber
    sqrtRebalanceEntryUpdateStable: BigNumber
    perpPayoff: BigNumber
    sqrtPayoff: BigNumber
  }

  export type TradeResultStruct = {
    payoff: IPredyPool.PayoffStruct
    vaultId: PromiseOrValue<BigNumberish>
    fee: PromiseOrValue<BigNumberish>
    minMargin: PromiseOrValue<BigNumberish>
    averagePrice: PromiseOrValue<BigNumberish>
    sqrtTwap: PromiseOrValue<BigNumberish>
    sqrtPrice: PromiseOrValue<BigNumberish>
  }

  export type TradeResultStructOutput = [
    IPredyPool.PayoffStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payoff: IPredyPool.PayoffStructOutput
    vaultId: BigNumber
    fee: BigNumber
    minMargin: BigNumber
    averagePrice: BigNumber
    sqrtTwap: BigNumber
    sqrtPrice: BigNumber
  }
}

export declare namespace ISettlement {
  export type SettlementDataStruct = {
    settlementContractAddress: PromiseOrValue<string>
    encodedData: PromiseOrValue<BytesLike>
  }

  export type SettlementDataStructOutput = [string, string] & {
    settlementContractAddress: string
    encodedData: string
  }
}

export interface QuoterMarketInterface extends utils.Interface {
  functions: {
    'predyTradeAfterCallback((uint256,uint256,int256,int256,bytes),((int256,int256,int256,int256,int256,int256),uint256,int256,int256,int256,uint256,uint256))': FunctionFragment
    'quoteBaseAmountDelta(((address,address,uint256,uint256),uint256,uint64,int256,int256,int256,uint256,address,bytes))': FunctionFragment
    'quoteTrade(((address,address,uint256,uint256),uint256,uint64,int256,int256,int256,uint256,address,bytes),(address,bytes))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'predyTradeAfterCallback'
      | 'quoteBaseAmountDelta'
      | 'quoteTrade'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'predyTradeAfterCallback',
    values: [IPredyPool.TradeParamsStruct, IPredyPool.TradeResultStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'quoteBaseAmountDelta',
    values: [GeneralOrderStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'quoteTrade',
    values: [GeneralOrderStruct, ISettlement.SettlementDataStruct]
  ): string

  decodeFunctionResult(
    functionFragment: 'predyTradeAfterCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'quoteBaseAmountDelta',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'quoteTrade', data: BytesLike): Result

  events: {}
}

export interface QuoterMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: QuoterMarketInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteBaseAmountDelta(
      order: GeneralOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteTrade(
      order: GeneralOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  predyTradeAfterCallback(
    arg0: IPredyPool.TradeParamsStruct,
    tradeResult: IPredyPool.TradeResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  quoteBaseAmountDelta(
    order: GeneralOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  quoteTrade(
    order: GeneralOrderStruct,
    settlementData: ISettlement.SettlementDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: CallOverrides
    ): Promise<void>

    quoteBaseAmountDelta(
      order: GeneralOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    quoteTrade(
      order: GeneralOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: CallOverrides
    ): Promise<IPredyPool.TradeResultStructOutput>
  }

  filters: {}

  estimateGas: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    quoteBaseAmountDelta(
      order: GeneralOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    quoteTrade(
      order: GeneralOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    predyTradeAfterCallback(
      arg0: IPredyPool.TradeParamsStruct,
      tradeResult: IPredyPool.TradeResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    quoteBaseAmountDelta(
      order: GeneralOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    quoteTrade(
      order: GeneralOrderStruct,
      settlementData: ISettlement.SettlementDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}

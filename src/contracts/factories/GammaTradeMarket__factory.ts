/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GammaTradeMarket,
  GammaTradeMarketInterface,
} from "../GammaTradeMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPredyPool",
        name: "_predyPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "permit2Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotPredyPool",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "SignerIsNotVaultOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "settlementData",
        type: "bytes",
      },
    ],
    name: "execLiquidationCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
        ],
        internalType: "struct IFillerMarket.SignedOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "executeOrder",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pairId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "tradeAmount",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "tradeAmountSqrt",
            type: "int256",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct IPredyPool.TradeParams",
        name: "tradeParams",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "",
        type: "tuple",
      },
    ],
    name: "predyTradeAfterCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
    ],
    name: "userPositions",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type GammaTradeMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GammaTradeMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GammaTradeMarket__factory extends ContractFactory {
  constructor(...args: GammaTradeMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    quoteTokenAddress: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GammaTradeMarket> {
    return super.deploy(
      _predyPool,
      quoteTokenAddress,
      permit2Address,
      overrides || {}
    ) as Promise<GammaTradeMarket>;
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    quoteTokenAddress: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      quoteTokenAddress,
      permit2Address,
      overrides || {}
    );
  }
  override attach(address: string): GammaTradeMarket {
    return super.attach(address) as GammaTradeMarket;
  }
  override connect(signer: Signer): GammaTradeMarket__factory {
    return super.connect(signer) as GammaTradeMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GammaTradeMarketInterface {
    return new utils.Interface(_abi) as GammaTradeMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaTradeMarket {
    return new Contract(address, _abi, signerOrProvider) as GammaTradeMarket;
  }
}

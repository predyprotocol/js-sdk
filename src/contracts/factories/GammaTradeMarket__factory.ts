/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type {
  GammaTradeMarket,
  GammaTradeMarketInterface
} from '../GammaTradeMarket'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IPredyPool',
        name: '_predyPool',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'permit2Address',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'CallerIsNotFiller',
    type: 'error'
  },
  {
    inputs: [],
    name: 'CallerIsNotPredyPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'DeadlinePassed',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidMarket',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SignerIsNotVaultOwner',
    type: 'error'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      },
      {
        internalType: 'bytes',
        name: 'settlementData',
        type: 'bytes'
      }
    ],
    name: 'execLiquidationCall',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'order',
            type: 'bytes'
          },
          {
            internalType: 'bytes',
            name: 'sig',
            type: 'bytes'
          }
        ],
        internalType: 'struct IFillerMarket.SignedOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'executeOrder',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'bytes',
            name: 'extraData',
            type: 'bytes'
          }
        ],
        internalType: 'struct IPredyPool.TradeParams',
        name: 'tradeParams',
        type: 'tuple'
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: '',
        type: 'tuple'
      }
    ],
    name: 'predyTradeAfterCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'updateQuoteTokenMap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      }
    ],
    name: 'userPositions',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001d7d38038062001d7d83398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b611caf80620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e7f13701461005c57806374304a79146100a2578063944b560b146100b7578063a966d863146100ca578063e1c951ca146100ea575b600080fd5b61008561006a366004610b96565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b56100b0366004610d69565b6100fd565b005b6100b56100c5366004610e64565b610192565b6100dd6100d8366004610f7c565b610295565b60405161009991906110a6565b6100b56100f8366004610b96565b6105b1565b6000546040805180820182523081526020810184905290516391d0370f60e01b81526001600160a01b03909216916391d0370f91610149918691670de0b6b3a764000091600401611134565b610180604051808303816000875af1158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d919061115c565b505050565b6000546001600160a01b031633146101bd57604051637542ed5d60e11b815260040160405180910390fd5b600082608001518060200190518101906101d79190611214565b905060008113156102045761018d6101f28460000151610606565b6000546001600160a01b031683610681565b600081121561018d576000546001600160a01b031663c6b6d34060013061022a8561122d565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561027857600080fd5b505af115801561028c573d6000803e3d6000fd5b50505050505050565b61029d610b22565b600083600001518060200190518101906102b7919061132e565b905060006102c9828660200151610785565b6040808401516001600160401b03166000908152600160205220549091506001600160a01b03166102f957600080fd5b6040808301516001600160401b031660009081526001602052205460608301516001600160a01b0390811691161461033057600080fd5b6103398161083b565b6000546040805160a08082018352858301516001600160401b03168252602080870151818401526080808801518486015291870151606084015260c087015184518083019190915284518082039092018252840184529082015290516309b819b360e41b81526001600160a01b0390921691639b819b30916103bf918890600401611410565b610180604051808303816000875af11580156103df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610403919061115c565b925081602001516000036104ad5781516020908101518482018051600090815260038452604080822080546001600160a01b0319166001600160a01b0395861617905590549151865190940151905163055a6d9b60e51b8152600481019490945282166024840152169063ab4db36090604401600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050506104f2565b60208084015160009081526003825260409020548351909101516001600160a01b039081169116146104f25760405163708c545360e01b815260040160405180910390fd5b8160e001516001600160a01b031663799f5b1b83856040518363ffffffff1660e01b8152600401610524929190611468565b60006040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b5050505060008260c0015112156105a8576040808301516001600160401b03166000908152600160209081529190205483519091015160c08401516105a8926001600160a01b031691906105a39061122d565b610681565b50505b92915050565b6000818152600160205260409020546001600160a01b0316610603576105d681610606565b600082815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b50565b6000805460405163324abcfb60e21b81526004810184905282916001600160a01b03169063c92af3ec9060240161072060405180830381865afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611835565b60600151519392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916106dd919061190d565b6000604051808303816000865af19150503d806000811461071a576040519150601f19603f3d011682016040523d82523d6000602084013e61071f565b606091505b50915091508180156107495750805115806107495750808060200190518101906107499190611929565b61077e5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640160405180910390fd5b5050505050565b6040805161014081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905282526020820181905291810182905260608082019290925260808101919091526000808460c00151136107eb5760006107f1565b8360c001515b90506040518060a001604052808560000151815260200185606001516001600160a01b0316815260200182815260200161082a866109d4565b815260200184905291505092915050565b61084481610a67565b6002546001600160a01b031663137c29fe6108c2836040805160a0808201835260006060808401828152608080860184905290855260208086018490529486019290925284519283018552858401516001600160a01b0316838201908152868601518484015283528551015192820192909252925101519082015290565b6040805180820182526000808252602091820152815180830183523081529186015190820152846000015160200151856060015160405160200161090590611944565b60408051601f19818403018152608083019091526047808352909190611c33602083013960405160200161093a929190611a6f565b60408051601f1981840301815260608301909152602e808352909190611c05602083013960405160200161096f929190611a9e565b60408051601f198184030181529082905260808901516001600160e01b031960e089901b1683526109a69695949392600401611aef565b600060405180830381600087803b1580156109c057600080fd5b505af115801561077e573d6000803e3d6000fd5b60006040516020016109e590611944565b60405160208183030381529060405280519060200120610a088360000151610ab8565b83602001518460400151856060015186608001518760a001518860c001518960e001518a6101000151604051602001610a4a9a99989796959493929190611b92565b604051602081830303815290604052805190602001209050919050565b8051516001600160a01b03163014610a9257604051639db8d5b160e01b815260040160405180910390fd5b8051608001514211156106035760405163387b2e5560e11b815260040160405180910390fd5b6000604051806080016040528060478152602001611c3360479139805160209182012083518483015160608601516080870151604051610a4a96019485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b6040518060e00160405280610b666040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215610ba857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715610be757610be7610baf565b60405290565b60405160c081016001600160401b0381118282101715610be757610be7610baf565b60405160a081016001600160401b0381118282101715610be757610be7610baf565b604080519081016001600160401b0381118282101715610be757610be7610baf565b60405161012081016001600160401b0381118282101715610be757610be7610baf565b60405161022081016001600160401b0381118282101715610be757610be7610baf565b60405161016081016001600160401b0381118282101715610be757610be7610baf565b604051601f8201601f191681016001600160401b0381118282101715610ce457610ce4610baf565b604052919050565b60006001600160401b03821115610d0557610d05610baf565b50601f01601f191660200190565b600082601f830112610d2457600080fd5b8135610d37610d3282610cec565b610cbc565b818152846020838601011115610d4c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610d7c57600080fd5b8235915060208301356001600160401b03811115610d9957600080fd5b610da585828601610d13565b9150509250929050565b6000818303610180811215610dc357600080fd5b610dcb610bc5565b915060c0811215610ddb57600080fd5b50610de4610bed565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a08385031215610e7857600080fd5b82356001600160401b0380821115610e8f57600080fd5b9084019060a08287031215610ea357600080fd5b610eab610c0f565b82358152602083013560208201526040830135604082015260608301356060820152608083013582811115610edf57600080fd5b610eeb88828601610d13565b608083015250809450505050610f048460208501610daf565b90509250929050565b6001600160a01b038116811461060357600080fd5b600060408284031215610f3457600080fd5b610f3c610c31565b90508135610f4981610f0d565b815260208201356001600160401b03811115610f6457600080fd5b610f7084828501610d13565b60208301525092915050565b60008060408385031215610f8f57600080fd5b82356001600160401b0380821115610fa657600080fd5b9084019060408287031215610fba57600080fd5b610fc2610c31565b823582811115610fd157600080fd5b610fdd88828601610d13565b825250602083013582811115610ff257600080fd5b610ffe88828601610d13565b60208301525080945050602085013591508082111561101c57600080fd5b50610da585828601610f22565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015250602081015160c0830152604081015160e08301526060810151610100830152608081015161012083015260a081015161014083015260c08101516101608301525050565b61018081016105ab8284611029565b60005b838110156110d05781810151838201526020016110b8565b50506000910152565b600081518084526110f18160208601602086016110b5565b601f01601f19169290920160200192915050565b60018060a01b038151168252600060208201516040602085015261112c60408501826110d9565b949350505050565b8381528260208201526060604082015260006111536060830184611105565b95945050505050565b600081830361018081121561117057600080fd5b611178610bc5565b60c082121561118657600080fd5b61118e610bed565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b60006020828403121561122657600080fd5b5051919050565b6000600160ff1b820161125057634e487b7160e01b600052601160045260246000fd5b5060000390565b805161126281610f0d565b919050565b600060a0828403121561127957600080fd5b611281610c0f565b9050815161128e81610f0d565b8152602082015161129e81610f0d565b602082015260408201516112b181610f0d565b80604083015250606082015160608201526080820151608082015292915050565b80516001600160401b038116811461126257600080fd5b600082601f8301126112fa57600080fd5b8151611308610d3282610cec565b81815284602083860101111561131d57600080fd5b61112c8260208301602087016110b5565b60006020828403121561134057600080fd5b81516001600160401b038082111561135757600080fd5b908301906101a0828603121561136c57600080fd5b611374610c53565b61137e8684611267565b815260a0830151602082015261139660c084016112d2565b60408201526113a760e08401611257565b606082015261010080840151608083015261012084015160a083015261014084015160c08301526113db6101608501611257565b60e0830152610180840151838111156113f357600080fd5b6113ff888287016112e9565b918301919091525095945050505050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c084015261145460e08401826110d9565b905082810360208401526111538185611105565b6101a0808252835180516001600160a01b039081168484015260208083015182166101c086015260408084015183166101e0870152606080850151610200880152608094850151610220880152918801516102408701528701516001600160401b03166102608601528601518116610280850152908501516102a084015260a08501516102c084015260c08501516102e084015260e0850151166103008301526101008401516103208301829052600091906115286103408501826110d9565b925050506115396020830184611029565b9392505050565b60006080828403121561155257600080fd5b604051608081018181106001600160401b038211171561157457611574610baf565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008183036101c08112156115b957600080fd5b6115c1610bed565b915082516115ce81610f0d565b825260208301516115de81610f0d565b602083015260c0603f19820112156115f557600080fd5b506115fe610bed565b60408301518152606083015160208201526080830151604082015260a0830151606082015260c0830151608082015260e083015160a08201528060408301525061164c836101008401611540565b606082015261018082015160808201526101a082015160a082015292915050565b8051600281900b811461126257600080fd5b60006060828403121561169157600080fd5b604051606081018181106001600160401b03821117156116b3576116b3610baf565b604052825181529050806116c96020840161166d565b60208201526116da6040840161166d565b60408201525092915050565b6000604082840312156116f857600080fd5b611700610c31565b9050815181526020820151602082015292915050565b6000610260828403121561172957600080fd5b611731610c76565b905061173c82611257565b815261174a6020830161166d565b602082015261175b6040830161166d565b604082015261176c606083016112d2565b60608201526080828101519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a06117df848285016116e6565b908201526101e06117f2848483016116e6565b6101c08301526102208301519082015261024090910151610200820152919050565b8051801515811461126257600080fd5b805160ff8116811461126257600080fd5b6000610720828403121561184857600080fd5b611850610c99565b8251815261186060208401611257565b602082015261187160408401611257565b604082015261188384606085016115a5565b60608201526118968461022085016115a5565b60808201526118a9846103e0850161167f565b60a08201526118bc846104408501611716565b60c08201526118ce6106a08401611257565b60e08201526118e06106c08401611814565b6101008201526118f36106e08401611824565b610120820152610700929092015161014083015250919050565b6000825161191f8184602087016110b5565b9190910192915050565b60006020828403121561193b57600080fd5b61153982611814565b6a08ec2dadac29ee4c8cae4560ab1b81526e13dc99195c925b999bc81a5b999bcb608a1b600b820152721d5a5b9d0c8d4d881c1bdcda5d1a5bdb92590b606a1b601a8201526d1d5a5b9d0d8d081c185a5c92590b60921b602d8201527f6164647265737320656e747279546f6b656e416464726573732c000000000000603b820152721a5b9d0c8d4d881d1c985919505b5bdd5b9d0b606a1b60558201527f696e74323536207472616465416d6f756e74537172742c0000000000000000006068820152731a5b9d0c8d4d881b585c99da5b905b5bdd5b9d0b60621b607f8201527f616464726573732076616c696461746f7241646472657373000000000000000060938201527462797465732076616c69646174696f6e446174612960581b60ab82015260c00190565b60008351611a818184602088016110b5565b835190830190611a958183602088016110b5565b01949350505050565b7247616d6d614f72646572207769746e6573732960681b815260008351611acc8160138501602088016110b5565b835190830190611ae38160138401602088016110b5565b01601301949350505050565b6000610140611b12838a5180516001600160a01b03168252602090810151910152565b6020890151604084015260408901516060840152611b46608084018980516001600160a01b03168252602090810151910152565b6001600160a01b03871660c084015260e083018690526101008301819052611b70818401866110d9565b9050828103610120840152611b8581856110d9565b9998505050505050505050565b60006101408c83528b60208401528a60408401526001600160401b038a16606084015260018060a01b03808a1660808501528860a08501528760c08501528660e08501528086166101008501525080610120840152611bf3818401856110d9565b9d9c5050505050505050505050505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f2861646472657373206d61726b65742c61646472657373207472616465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a26469706673582212200ec4afd924b4fa0e77f5ea1ae0ef7746b307bf283fb1fff9b0d1849cad98699664736f6c63430008130033'

type GammaTradeMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: GammaTradeMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class GammaTradeMarket__factory extends ContractFactory {
  constructor(...args: GammaTradeMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GammaTradeMarket> {
    return super.deploy(
      _predyPool,
      permit2Address,
      overrides || {}
    ) as Promise<GammaTradeMarket>
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      permit2Address,
      overrides || {}
    )
  }
  override attach(address: string): GammaTradeMarket {
    return super.attach(address) as GammaTradeMarket
  }
  override connect(signer: Signer): GammaTradeMarket__factory {
    return super.connect(signer) as GammaTradeMarket__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): GammaTradeMarketInterface {
    return new utils.Interface(_abi) as GammaTradeMarketInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaTradeMarket {
    return new Contract(address, _abi, signerOrProvider) as GammaTradeMarket
  }
}

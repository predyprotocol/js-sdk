/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type {
  GammaTradeMarket,
  GammaTradeMarketInterface
} from '../GammaTradeMarket'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IPredyPool',
        name: '_predyPool',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'permit2Address',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'CallerIsNotFiller',
    type: 'error'
  },
  {
    inputs: [],
    name: 'CallerIsNotPredyPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'DeadlinePassed',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidMarket',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SignerIsNotVaultOwner',
    type: 'error'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      }
    ],
    name: 'Traded',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      },
      {
        internalType: 'bytes',
        name: 'settlementData',
        type: 'bytes'
      }
    ],
    name: 'execLiquidationCall',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'order',
            type: 'bytes'
          },
          {
            internalType: 'bytes',
            name: 'sig',
            type: 'bytes'
          }
        ],
        internalType: 'struct IFillerMarket.SignedOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'executeOrder',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'bytes',
            name: 'extraData',
            type: 'bytes'
          }
        ],
        internalType: 'struct IPredyPool.TradeParams',
        name: 'tradeParams',
        type: 'tuple'
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    name: 'predyTradeAfterCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'filler',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'positionId',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'entryTokenAddress',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct GammaOrder',
        name: 'gammaOrder',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      },
      {
        internalType: 'contract PredyPoolQuoter',
        name: 'quoter',
        type: 'address'
      }
    ],
    name: 'quoteExecuteOrder',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'updateQuoteTokenMap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      }
    ],
    name: 'userPositions',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const

const _bytecode =
  '0x60806040523480156200001157600080fd5b50604051620023373803806200233783398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b61226980620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631e7f13701461006757806374304a79146100ad578063944b560b146100c2578063a966d863146100d5578063e1c951ca146100f5578063efebe4da14610108575b600080fd5b610090610075366004610e0b565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004611001565b61011b565b005b6100c06100d03660046110fc565b6101b0565b6100e86100e3366004611224565b61041d565b6040516100a4919061134e565b6100c0610103366004610e0b565b610732565b6100c06101163660046113e8565b610787565b6000546040805180820182523081526020810184905290516391d0370f60e01b81526001600160a01b03909216916391d0370f91610167918691670de0b6b3a76400009160040161157e565b610180604051808303816000875af1158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab91906115a6565b505050565b6000546001600160a01b031633146101db57604051637542ed5d60e11b815260040160405180910390fd5b806060015160000361030e57600080546020840151604051632500ed8d60e21b81526001600160a01b0390921691639403b6349161021f9160040190815260200190565b6102a060405180830381865afa15801561023d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610261919061170e565b600054608082015160405163031adb4d60e61b81526001600482015230602482015260448101919091529192506001600160a01b03169063c6b6d34090606401600060405180830381600087803b1580156102bb57600080fd5b505af11580156102cf573d6000803e3d6000fd5b505050506101ab6102e3846000015161084f565b60208086015160009081526003909152604090205460808401516001600160a01b03909116906108ca565b600082608001518060200190518101906103289190611824565b90506000811315610355576101ab610343846000015161084f565b6000546001600160a01b0316836108ca565b60008112156101ab576000546001600160a01b031663c6b6d34060013061037b8561183d565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506101ab6103f1846000015161084f565b6020808601516000908152600390915260409020546001600160a01b03166104188461183d565b6108ca565b610425610d97565b6000836000015180602001905181019061043f9190611917565b905060006104518286602001516109ce565b6040808401516001600160401b03166000908152600160205220549091506001600160a01b031661048157600080fd5b6040808301516001600160401b031660009081526001602052205460608301516001600160a01b039081169116146104b857600080fd5b6104c181610a84565b6000546040805160a08082018352858301516001600160401b03168252602080870151818401526080808801518486015291870151606084015260c087015184518083019190915284518082039092018252840184529082015290516309b819b360e41b81526001600160a01b0390921691639b819b30916105479188906004016119f9565b610180604051808303816000875af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b91906115a6565b925081602001516000036106355781516020908101518482018051600090815260038452604080822080546001600160a01b0319166001600160a01b0395861617905590549151865190940151905163055a6d9b60e51b8152600481019490945282166024840152169063ab4db36090604401600060405180830381600087803b15801561061857600080fd5b505af115801561062c573d6000803e3d6000fd5b5050505061067a565b60208084015160009081526003825260409020548351909101516001600160a01b0390811691161461067a5760405163708c545360e01b815260040160405180910390fd5b8160e001516001600160a01b031663799f5b1b83856040518363ffffffff1660e01b81526004016106ac929190611a51565b60006040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b5050835160209081015186820151604080516001600160a01b039093168352928201527fe39122fcaa92bc902344d31c0f322ba04506be819fd20dafb197b26bf2e9045d935001905060405180910390a150505b92915050565b6000818152600160205260409020546001600160a01b0316610784576107578161084f565b600082815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b50565b6040805160a08082018352858301516001600160401b031682526020808701518184015260808088015184860152918701516060840152835190810184526000808252918301529151630a20b62d60e21b81526001600160a01b03841691632882d8b4916107fa919087906004016119f9565b610180604051808303816000875af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e91906115a6565b905061084981610c1d565b50505050565b6000805460405163324abcfb60e21b81526004810184905282916001600160a01b03169063c92af3ec9060240161074060405180830381865afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611ddc565b60600151519392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916109269190611ec7565b6000604051808303816000865af19150503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b50915091508180156109925750805115806109925750808060200190518101906109929190611ee3565b6109c75760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640160405180910390fd5b5050505050565b6040805161014081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905282526020820181905291810182905260608082019290925260808101919091526000808460c0015113610a34576000610a3a565b8360c001515b90506040518060a001604052808560000151815260200185606001516001600160a01b03168152602001828152602001610a7386610c49565b815260200184905291505092915050565b610a8d81610cdc565b6002546001600160a01b031663137c29fe610b0b836040805160a0808201835260006060808401828152608080860184905290855260208086018490529486019290925284519283018552858401516001600160a01b0316838201908152868601518484015283528551015192820192909252925101519082015290565b60408051808201825260008082526020918201528151808301835230815291860151908201528460000151602001518560600151604051602001610b4e90611efe565b60408051601f198184030181526080830190915260478083529091906121ed6020830139604051602001610b83929190612029565b60408051601f1981840301815260608301909152602e8083529091906121bf6020830139604051602001610bb8929190612058565b60408051601f198184030181529082905260808901516001600160e01b031960e089901b168352610bef96959493926004016120a9565b600060405180830381600087803b158015610c0957600080fd5b505af11580156109c7573d6000803e3d6000fd5b600081604051602001610c30919061134e565b6040516020818303038152906040529050805181602001fd5b6000604051602001610c5a90611efe565b60405160208183030381529060405280519060200120610c7d8360000151610d2d565b83602001518460400151856060015186608001518760a001518860c001518960e001518a6101000151604051602001610cbf9a9998979695949392919061214c565b604051602081830303815290604052805190602001209050919050565b8051516001600160a01b03163014610d0757604051639db8d5b160e01b815260040160405180910390fd5b8051608001514211156107845760405163387b2e5560e11b815260040160405180910390fd5b60006040518060800160405280604781526020016121ed60479139805160209182012083518483015160608601516080870151604051610cbf96019485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b6040518060e00160405280610ddb6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215610e1d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715610e5c57610e5c610e24565b60405290565b60405160c081016001600160401b0381118282101715610e5c57610e5c610e24565b60405160a081016001600160401b0381118282101715610e5c57610e5c610e24565b604080519081016001600160401b0381118282101715610e5c57610e5c610e24565b60405161012081016001600160401b0381118282101715610e5c57610e5c610e24565b60405161010081016001600160401b0381118282101715610e5c57610e5c610e24565b60405161022081016001600160401b0381118282101715610e5c57610e5c610e24565b60405161018081016001600160401b0381118282101715610e5c57610e5c610e24565b604051601f8201601f191681016001600160401b0381118282101715610f7c57610f7c610e24565b604052919050565b60006001600160401b03821115610f9d57610f9d610e24565b50601f01601f191660200190565b600082601f830112610fbc57600080fd5b8135610fcf610fca82610f84565b610f54565b818152846020838601011115610fe457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561101457600080fd5b8235915060208301356001600160401b0381111561103157600080fd5b61103d85828601610fab565b9150509250929050565b600081830361018081121561105b57600080fd5b611063610e3a565b915060c081121561107357600080fd5b5061107c610e62565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a0838503121561111057600080fd5b82356001600160401b038082111561112757600080fd5b9084019060a0828703121561113b57600080fd5b611143610e84565b8235815260208301356020820152604083013560408201526060830135606082015260808301358281111561117757600080fd5b61118388828601610fab565b60808301525080945050505061119c8460208501611047565b90509250929050565b6001600160a01b038116811461078457600080fd5b80356111c5816111a5565b919050565b6000604082840312156111dc57600080fd5b6111e4610ea6565b905081356111f1816111a5565b815260208201356001600160401b0381111561120c57600080fd5b61121884828501610fab565b60208301525092915050565b6000806040838503121561123757600080fd5b82356001600160401b038082111561124e57600080fd5b908401906040828703121561126257600080fd5b61126a610ea6565b82358281111561127957600080fd5b61128588828601610fab565b82525060208301358281111561129a57600080fd5b6112a688828601610fab565b6020830152508094505060208501359150808211156112c457600080fd5b5061103d858286016111ca565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015250602081015160c0830152604081015160e08301526060810151610100830152608081015161012083015260a081015161014083015260c08101516101608301525050565b610180810161072c82846112d1565b600060a0828403121561136f57600080fd5b611377610e84565b90508135611384816111a5565b81526020820135611394816111a5565b602082015260408201356113a7816111a5565b80604083015250606082013560608201526080820135608082015292915050565b6001600160401b038116811461078457600080fd5b80356111c5816113c8565b6000806000606084860312156113fd57600080fd5b83356001600160401b038082111561141457600080fd5b908501906101a0828803121561142957600080fd5b611431610ec8565b61143b888461135d565b815260a0830135602082015261145360c084016113dd565b604082015261146460e084016111ba565b606082015261010080840135608083015261012084013560a083015261014084013560c083015261149861016085016111ba565b60e0830152610180840135838111156114b057600080fd5b6114bc8a828701610fab565b8284015250508095505060208601359150808211156114da57600080fd5b506114e7868287016111ca565b9250506114f6604085016111ba565b90509250925092565b60005b8381101561151a578181015183820152602001611502565b50506000910152565b6000815180845261153b8160208601602086016114ff565b601f01601f19169290920160200192915050565b60018060a01b03815116825260006020820151604060208501526115766040850182611523565b949350505050565b83815282602082015260606040820152600061159d606083018461154f565b95945050505050565b60008183036101808112156115ba57600080fd5b6115c2610e3a565b60c08212156115d057600080fd5b6115d8610e62565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b80516111c5816111a5565b8051600281900b81146111c557600080fd5b80516111c5816113c8565b60006040828403121561169857600080fd5b6116a0610ea6565b9050815181526020820151602082015292915050565b600060c082840312156116c857600080fd5b6116d0610e62565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60008183036102a081121561172257600080fd5b61172a610e62565b83518152602084015161173c816111a5565b6020820152604084015161174f816111a5565b60408201526060840151611762816111a5565b606082015260808481015190820152610200609f198301121561178457600080fd5b61178c610eeb565b915060a084015182526117a160c08501611669565b60208301526117b260e08501611669565b60408301526117c4610100850161167b565b60608301526117d7856101208601611686565b60808301526117ea8561016086016116b6565b60a08301526117fd856102208601611686565b60c0830152611810856102608601611686565b60e083015260a08101919091529392505050565b60006020828403121561183657600080fd5b5051919050565b6000600160ff1b820161186057634e487b7160e01b600052601160045260246000fd5b5060000390565b600060a0828403121561187957600080fd5b611881610e84565b9050815161188e816111a5565b8152602082015161189e816111a5565b602082015260408201516118b1816111a5565b80604083015250606082015160608201526080820151608082015292915050565b600082601f8301126118e357600080fd5b81516118f1610fca82610f84565b81815284602083860101111561190657600080fd5b6115768260208301602087016114ff565b60006020828403121561192957600080fd5b81516001600160401b038082111561194057600080fd5b908301906101a0828603121561195557600080fd5b61195d610ec8565b6119678684611867565b815260a0830151602082015261197f60c0840161167b565b604082015261199060e0840161165e565b606082015261010080840151608083015261012084015160a083015261014084015160c08301526119c4610160850161165e565b60e0830152610180840151838111156119dc57600080fd5b6119e8888287016118d2565b918301919091525095945050505050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c0840152611a3d60e0840182611523565b9050828103602084015261159d818561154f565b6101a0808252835180516001600160a01b039081168484015260208083015182166101c086015260408084015183166101e0870152606080850151610200880152608094850151610220880152918801516102408701528701516001600160401b03166102608601528601518116610280850152908501516102a084015260a08501516102c084015260c08501516102e084015260e085015116610300830152610100840151610320830182905260009190611b11610340850182611523565b92505050611b2260208301846112d1565b9392505050565b600060808284031215611b3b57600080fd5b604051608081018181106001600160401b0382111715611b5d57611b5d610e24565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008183036101c0811215611ba257600080fd5b611baa610e62565b91508251611bb7816111a5565b82526020830151611bc7816111a5565b602083015260c0603f1982011215611bde57600080fd5b50611be7610e62565b60408301518152606083015160208201526080830151604082015260a0830151606082015260c0830151608082015260e083015160a082015280604083015250611c35836101008401611b29565b606082015261018082015160808201526101a082015160a082015292915050565b600060608284031215611c6857600080fd5b604051606081018181106001600160401b0382111715611c8a57611c8a610e24565b60405282518152905080611ca060208401611669565b6020820152611cb160408401611669565b60408201525092915050565b60006102608284031215611cd057600080fd5b611cd8610f0e565b9050611ce38261165e565b8152611cf160208301611669565b6020820152611d0260408301611669565b6040820152611d136060830161167b565b60608201526080828101519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a0611d8684828501611686565b908201526101e0611d9984848301611686565b6101c08301526102208301519082015261024090910151610200820152919050565b805180151581146111c557600080fd5b805160ff811681146111c557600080fd5b60006107408284031215611def57600080fd5b611df7610f31565b82518152611e076020840161165e565b6020820152611e186040840161165e565b6040820152611e2a8460608501611b8e565b6060820152611e3d846102208501611b8e565b6080820152611e50846103e08501611c56565b60a0820152611e63846104408501611cbd565b60c0820152611e756106a0840161165e565b60e0820152611e876106c08401611dbb565b610100820152611e9a6106e08401611dbb565b610120820152611ead6107008401611dcb565b610140820152610720929092015161016083015250919050565b60008251611ed98184602087016114ff565b9190910192915050565b600060208284031215611ef557600080fd5b611b2282611dbb565b6a08ec2dadac29ee4c8cae4560ab1b81526e13dc99195c925b999bc81a5b999bcb608a1b600b820152721d5a5b9d0c8d4d881c1bdcda5d1a5bdb92590b606a1b601a8201526d1d5a5b9d0d8d081c185a5c92590b60921b602d8201527f6164647265737320656e747279546f6b656e416464726573732c000000000000603b820152721a5b9d0c8d4d881d1c985919505b5bdd5b9d0b606a1b60558201527f696e74323536207472616465416d6f756e74537172742c0000000000000000006068820152731a5b9d0c8d4d881b585c99da5b905b5bdd5b9d0b60621b607f8201527f616464726573732076616c696461746f7241646472657373000000000000000060938201527462797465732076616c69646174696f6e446174612960581b60ab82015260c00190565b6000835161203b8184602088016114ff565b83519083019061204f8183602088016114ff565b01949350505050565b7247616d6d614f72646572207769746e6573732960681b8152600083516120868160138501602088016114ff565b83519083019061209d8160138401602088016114ff565b01601301949350505050565b60006101406120cc838a5180516001600160a01b03168252602090810151910152565b6020890151604084015260408901516060840152612100608084018980516001600160a01b03168252602090810151910152565b6001600160a01b03871660c084015260e08301869052610100830181905261212a81840186611523565b905082810361012084015261213f8185611523565b9998505050505050505050565b60006101408c83528b60208401528a60408401526001600160401b038a16606084015260018060a01b03808a1660808501528860a08501528760c08501528660e085015280861661010085015250806101208401526121ad81840185611523565b9d9c5050505050505050505050505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f2861646472657373206d61726b65742c61646472657373207472616465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a264697066735822122045f2bc5e3333606547f02b1ec035ffd26d169ed5eab5b18b0f6d2d53028beaf264736f6c63430008130033'

type GammaTradeMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: GammaTradeMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class GammaTradeMarket__factory extends ContractFactory {
  constructor(...args: GammaTradeMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GammaTradeMarket> {
    return super.deploy(
      _predyPool,
      permit2Address,
      overrides || {}
    ) as Promise<GammaTradeMarket>
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      permit2Address,
      overrides || {}
    )
  }
  override attach(address: string): GammaTradeMarket {
    return super.attach(address) as GammaTradeMarket
  }
  override connect(signer: Signer): GammaTradeMarket__factory {
    return super.connect(signer) as GammaTradeMarket__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): GammaTradeMarketInterface {
    return new utils.Interface(_abi) as GammaTradeMarketInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaTradeMarket {
    return new Contract(address, _abi, signerOrProvider) as GammaTradeMarket
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type {
  PerpMarketQuoter,
  PerpMarketQuoterInterface
} from '../PerpMarketQuoter'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract PerpMarket',
        name: '_perpMarket',
        type: 'address'
      },
      {
        internalType: 'contract PredyPoolQuoter',
        name: '_predyPoolQuoter',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'perpMarket',
    outputs: [
      {
        internalType: 'contract PerpMarket',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'predyPoolQuoter',
    outputs: [
      {
        internalType: 'contract PredyPoolQuoter',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'filler',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'positionId',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'entryTokenAddress',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct PerpOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'quoteExecuteOrder',
    outputs: [
      {
        components: [
          {
            internalType: 'int256',
            name: 'entryUpdate',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'payoff',
            type: 'int256'
          }
        ],
        internalType: 'struct PerpMarket.PerpTradeResult',
        name: 'perpTradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256'
      }
    ],
    name: 'quoteUserPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'address',
            name: 'filler',
            type: 'address'
          },
          {
            internalType: 'address',
            name: 'owner',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'positionAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'entryValue',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'cumulativeFundingRates',
            type: 'int256'
          }
        ],
        internalType: 'struct PerpMarket.UserPosition',
        name: 'userPosition',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  }
] as const

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161099f38038061099f83398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b6108de806100c16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063462bf388146100515780634c49b7e4146100815780637521ec92146100af57806388c2a40814610131575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610576565b610144565b60408051825181526020928301519281019290925201610078565b6100c26100bd366004610670565b610201565b60405161007891906000610100820190508251825260208301516020830152604083015160018060a01b03808216604085015280606086015116606085015250506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b600154610064906001600160a01b031681565b604080518082019091526000808252602082015260005460015460405163798c80d560e01b81526001600160a01b039283169263798c80d59261018f928892889216906004016106fe565b600060405180830381600087803b1580156101a957600080fd5b505af19250505080156101ba575060015b6101fb573d8080156101e8576040519150601f19603f3d011682016040523d82523d6000602084013e6101ed565b606091505b506101f7816102a6565b9150505b92915050565b61020961030e565b600054604051633a90f64960e11b8152600481018490526001600160a01b0390911690637521ec9290602401600060405180830381600087803b15801561024f57600080fd5b505af1925050508015610260575060015b6102a1573d80801561028e576040519150601f19603f3d011682016040523d82523d6000602084013e610293565b606091505b5061029d816102e0565b9150505b919050565b604080518082019091526000808252602082015260c0825110156102cc57815182602001fd5b818060200190518101906101fb91906107f3565b6102e861030e565b60c0825110156102fa57815182602001fd5b818060200190518101906101fb9190610825565b604051806101000160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561039e5761039e610365565b60405290565b604051610100810167ffffffffffffffff8111828210171561039e5761039e610365565b6001600160a01b03811681146103dd57600080fd5b50565b80356102a1816103c8565b600060a082840312156103fd57600080fd5b60405160a0810181811067ffffffffffffffff8211171561042057610420610365565b6040529050808235610431816103c8565b81526020830135610441816103c8565b60208201526040830135610454816103c8565b8060408301525060608301356060820152608083013560808201525092915050565b803567ffffffffffffffff811681146102a157600080fd5b600082601f83011261049f57600080fd5b813567ffffffffffffffff808211156104ba576104ba610365565b604051601f8301601f19908116603f011681019082821181831017156104e2576104e2610365565b816040528381528660208588010111156104fb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006040828403121561052d57600080fd5b61053561037b565b90508135610542816103c8565b8152602082013567ffffffffffffffff81111561055e57600080fd5b61056a8482850161048e565b60208301525092915050565b6000806040838503121561058957600080fd5b823567ffffffffffffffff808211156105a157600080fd5b9084019061018082870312156105b657600080fd5b6105be6103a4565b6105c887846103eb565b815260a083013560208201526105e060c08401610476565b60408201526105f160e084016103e0565b6060820152610100830135608082015261012083013560a082015261061961014084016103e0565b60c08201526101608301358281111561063157600080fd5b61063d8882860161048e565b60e0830152509350602085013591508082111561065957600080fd5b506106668582860161051b565b9150509250929050565b60006020828403121561068257600080fd5b5035919050565b6000815180845260005b818110156106af57602081850181015186830182015201610693565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b03815116825260006020820151604060208501526106f66040850182610689565b949350505050565b6060808252845180516001600160a01b039081168484015260208201518116608080860191909152604083015190911660a08501529181015160c0840152015160e082015260208401516101008201526000604085015161076c61012084018267ffffffffffffffff169052565b5060608501516001600160a01b03908116610140840152608086015161016084015260a08601516101808085019190915260c08701519091166101a084015260e08601516101c08401919091526107c76101e0840182610689565b905082810360208401526107db81866106cf565b9150506106f660408301846001600160a01b03169052565b60006040828403121561080557600080fd5b61080d61037b565b82518152602083015160208201528091505092915050565b6000610100828403121561083857600080fd5b6108406103a4565b8251815260208301516020820152604083015161085c816103c8565b6040820152606083015161086f816103c8565b806060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152809150509291505056fea26469706673582212200be981cd74fe56c44efb034dcd9d58906b79dc24777fecb94422f9fe7748372664736f6c63430008130033'

type PerpMarketQuoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: PerpMarketQuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class PerpMarketQuoter__factory extends ContractFactory {
  constructor(...args: PerpMarketQuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _perpMarket: PromiseOrValue<string>,
    _predyPoolQuoter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PerpMarketQuoter> {
    return super.deploy(
      _perpMarket,
      _predyPoolQuoter,
      overrides || {}
    ) as Promise<PerpMarketQuoter>
  }
  override getDeployTransaction(
    _perpMarket: PromiseOrValue<string>,
    _predyPoolQuoter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _perpMarket,
      _predyPoolQuoter,
      overrides || {}
    )
  }
  override attach(address: string): PerpMarketQuoter {
    return super.attach(address) as PerpMarketQuoter
  }
  override connect(signer: Signer): PerpMarketQuoter__factory {
    return super.connect(signer) as PerpMarketQuoter__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): PerpMarketQuoterInterface {
    return new utils.Interface(_abi) as PerpMarketQuoterInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpMarketQuoter {
    return new Contract(address, _abi, signerOrProvider) as PerpMarketQuoter
  }
}

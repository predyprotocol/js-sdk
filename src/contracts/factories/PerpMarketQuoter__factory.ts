/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  PerpMarketQuoter,
  PerpMarketQuoterInterface,
} from "../PerpMarketQuoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract PerpMarket",
        name: "_perpMarket",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "perpMarket",
    outputs: [
      {
        internalType: "contract PerpMarket",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "trader",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "pairId",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "entryTokenAddress",
            type: "address",
          },
          {
            internalType: "int256",
            name: "tradeAmount",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "marginAmount",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "takeProfitPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopLossPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "slippageTolerance",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "validatorAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "validationData",
            type: "bytes",
          },
        ],
        internalType: "struct PerpOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "quoteExecuteOrder",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161089738038061089783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610804806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063366f82781461003b578063462bf388146100d0575b600080fd5b61004e610049366004610478565b6100fb565b60408051825180518252602080820151818401528184015183850152606080830151818501526080808401518186015260a093840151848601529186015160c0808601919091529486015160e0850152850151610100840152840151610120830152830151610140820152910151610160820152610180015b60405180910390f35b6000546100e3906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b6101036101da565b6000546040516306cdf04f60e31b81526001600160a01b039091169063366f8278906101359086908690600401610605565b600060405180830381600087803b15801561014f57600080fd5b505af1925050508015610160575060015b6101a1573d80801561018e576040519150601f19603f3d011682016040523d82523d6000602084013e610193565b606091505b5061019d816101a7565b9150505b92915050565b6101af6101da565b60c0825110156101c157815182602001fd5b818060200190518101906101a19190610716565b919050565b6040518060e0016040528061021e6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156102885761028861024e565b60405290565b60405160e0810167ffffffffffffffff811182821017156102885761028861024e565b60405160c0810167ffffffffffffffff811182821017156102885761028861024e565b80356001600160a01b03811681146101d557600080fd5b6000608082840312156102fd57600080fd5b6040516080810181811067ffffffffffffffff821117156103205761032061024e565b60405290508061032f836102d4565b815261033d602084016102d4565b602082015260408301356040820152606083013560608201525092915050565b803567ffffffffffffffff811681146101d557600080fd5b600082601f83011261038657600080fd5b813567ffffffffffffffff808211156103a1576103a161024e565b604051601f8301601f19908116603f011681019082821181831017156103c9576103c961024e565b816040528381528660208588010111156103e257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006040828403121561041457600080fd5b6040516040810167ffffffffffffffff82821081831117156104385761043861024e565b81604052829350610448856102d4565b8352602085013591508082111561045e57600080fd5b5061046b85828601610375565b6020830152505092915050565b6000806040838503121561048b57600080fd5b823567ffffffffffffffff808211156104a357600080fd5b908401906101a082870312156104b857600080fd5b6104c0610264565b6104ca87846102eb565b81526104d86080840161035d565b60208201526104e960a084016102d4565b604082015260c0830135606082015260e083013560808201526101008084013560a08301526101208085013560c0840152610527610140860161035d565b60e084015261053961016086016102d4565b8284015261018085013591508382111561055257600080fd5b61055e89838701610375565b90830152509350602085013591508082111561057957600080fd5b5061058685828601610402565b9150509250929050565b6000815180845260005b818110156105b65760208185018101518683018201520161059a565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b03815116825260006020820151604060208501526105fd6040850182610590565b949350505050565b6040808252835180516001600160a01b0390811684840152602082015116606080850191909152918101516080840152015160a08201526000602084015161065960c084018267ffffffffffffffff169052565b5060408401516001600160a01b03811660e0840152506060840151610100818185015260808601519150610120828186015260a087015161014086015260c087015161016086015260e087015192506106bf61018086018467ffffffffffffffff169052565b9086015191506101a0906106dd858301846001600160a01b03169052565b8601516101c085019190915290506106f96101e0840182610590565b9050828103602084015261070d81856105d6565b95945050505050565b600081830361018081121561072a57600080fd5b61073261028e565b60c082121561074057600080fd5b6107486102b1565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c082015280925050509291505056fea26469706673582212206be0bd00fdcca7ff882e022c714b146311a085a8de2e5fe74a2793ef8fa787fe64736f6c63430008130033";

type PerpMarketQuoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PerpMarketQuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PerpMarketQuoter__factory extends ContractFactory {
  constructor(...args: PerpMarketQuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _perpMarket: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PerpMarketQuoter> {
    return super.deploy(
      _perpMarket,
      overrides || {}
    ) as Promise<PerpMarketQuoter>;
  }
  override getDeployTransaction(
    _perpMarket: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_perpMarket, overrides || {});
  }
  override attach(address: string): PerpMarketQuoter {
    return super.attach(address) as PerpMarketQuoter;
  }
  override connect(signer: Signer): PerpMarketQuoter__factory {
    return super.connect(signer) as PerpMarketQuoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PerpMarketQuoterInterface {
    return new utils.Interface(_abi) as PerpMarketQuoterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpMarketQuoter {
    return new Contract(address, _abi, signerOrProvider) as PerpMarketQuoter;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type { PerpMarket, PerpMarketInterface } from '../PerpMarket'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IPredyPool',
        name: '_predyPool',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'permit2Address',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'CallerIsNotFiller',
    type: 'error'
  },
  {
    inputs: [],
    name: 'CallerIsNotPredyPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'DeadlinePassed',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidMarket',
    type: 'error'
  },
  {
    inputs: [],
    name: 'OutOfAcceptablePriceRange',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SignerIsNotVaultOwner',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SlippageTooLarge',
    type: 'error'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      }
    ],
    name: 'Closed',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      }
    ],
    name: 'Traded',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'cancelOrder',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'close',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'order',
            type: 'bytes'
          },
          {
            internalType: 'bytes',
            name: 'sig',
            type: 'bytes'
          }
        ],
        internalType: 'struct IFillerMarket.SignedOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'executeOrder',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'bytes',
            name: 'extraData',
            type: 'bytes'
          }
        ],
        internalType: 'struct IPredyPool.TradeParams',
        name: 'tradeParams',
        type: 'tuple'
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    name: 'predyTradeAfterCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'entryTokenAddress',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'address',
            name: 'canceler',
            type: 'address'
          },
          {
            internalType: 'uint256',
            name: 'takeProfitPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'stopLossPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'slippageTolerance',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct PerpOrder',
        name: 'perpOrder',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      },
      {
        internalType: 'contract PredyPoolQuoter',
        name: 'quoter',
        type: 'address'
      }
    ],
    name: 'quoteExecuteOrder',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'updateQuoteTokenMap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'userPositions',
    outputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      },
      {
        internalType: 'address',
        name: 'canceler',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'takeProfitPrice',
        type: 'uint256'
      },
      {
        internalType: 'uint256',
        name: 'stopLossPrice',
        type: 'uint256'
      },
      {
        internalType: 'uint64',
        name: 'slippageTolerance',
        type: 'uint64'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162002ab838038062002ab883398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b6129ea80620000ce6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636a2061371161005b5780636a20613714610169578063944b560b1461017c578063a966d8631461018f578063e1c951ca146101a257600080fd5b806315e81b7d146100825780631e4a0938146100975780635e1b4d99146100c0575b600080fd5b61009561009036600461170b565b6101b5565b005b6100aa6100a5366004611846565b6102a0565b6040516100b7919061191b565b60405180910390f35b6101236100ce36600461192a565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460048401546005909401546001600160a01b03938416959294939092169290916001600160401b031686565b604080516001600160a01b03978816815260208101969096529390951692840192909252606083015260808201526001600160401b0390911660a082015260c0016100b7565b61009561017736600461192a565b6105ef565b61009561018a366004611a0b565b61064d565b6100aa61019d366004611ab4565b61088e565b6100956101b0366004611b6b565b610c50565b6040805160a081018252602080860180516001600160401b03908116845287518301516001600160a01b039081166000908152600385528681209351909216825291835284812060010154838501526060808901518587015284018190528451928301855280835260808401929092529251630a20b62d60e21b81529092841691632882d8b49161024b91908790600401611bd4565b610180604051808303816000875af115801561026b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028f9190611c51565b905061029a81610ca5565b50505050565b6102a86113a1565b6001600160a01b038416600090815260036020908152604080832086845290915290206001810154158015906102ea575080546001600160a01b038681169116145b6102f357600080fd5b600080546001830154604051632500ed8d60e21b81526001600160a01b0390921691639403b6349161032b9160040190815260200190565b6102a060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190611db9565b6000805460a08301515160405163acfcd9fd60e01b8152600481019190915292935090916001600160a01b039091169063acfcd9fd90602401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190611ecf565b60a080840151608090810151516040805160c08101825288546001600160a01b03908116825260018a0154602083015260028a015416918101919091526003880154606082015260048801549281019290925260058701546001600160401b0316928201929092529192506104629160009091139083610cd1565b6000546040805160a0808201835285018051518252600187015460208301525160800151516001600160a01b0390931692639b819b30928201906104a590611efe565b81526020018560a0015160a00151600001516104c090611efe565b81526040805180820182526001600160a01b038d1680825260006020928301908152835180840192909252518184015282518082038401815260609091018352920191909152516001600160e01b031960e084901b16815261052791908990600401611bd4565b610180604051808303816000875af1158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190611c51565b600584015460a08085015101515191955061059791839187916001600160401b03909116901515610d54565b6001830154604080516001600160a01b038a1681526020810189905280820192909252517f792b1058d55c02122048f16ecbfdaab6be257e8c903a60a01f220960238aefc79181900360600190a15050509392505050565b6001600160a01b03808316600090815260036020908152604080832085845290915290208054909116331480610631575060028101546001600160a01b031633145b61063a57600080fd5b6000600382018190556004909101555050565b6000546001600160a01b0316331461067857604051637542ed5d60e11b815260040160405180910390fd5b600082608001518060200190518101906106929190611f1a565b905081606001516000036107a857600080546020850151604051632500ed8d60e21b81526001600160a01b0390921691639403b634916106d89160040190815260200190565b6102a060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611db9565b600054608082015160405163031adb4d60e61b81526001600482015230602482015260448101919091529192506001600160a01b03169063c6b6d34090606401600060405180830381600087803b15801561077457600080fd5b505af1158015610788573d6000803e3d6000fd5b5050505061029a61079c8560000151610e7e565b83516080840151610ef9565b602081015160008113156107dd576107d86107c68560000151610e7e565b6000546001600160a01b031683610ef9565b61029a565b600081121561029a576000546001600160a01b031663c6b6d34060013061080385611efe565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b5050505061029a6108798560000151610e7e565b835161088484611efe565b610ef9565b505050565b6108966113a1565b600083600001518060200190518101906108b09190611ff9565b905060006108c2828660200151610ff6565b6020808401516001600160401b03166000908152600190915260409020549091506001600160a01b03166108f557600080fd5b6020808301516001600160401b03166000908152600190915260409081902054908301516001600160a01b0390811691161461093057600080fd5b610939816110a4565b81516020908101516001600160a01b03908116600090815260038352604080822084870180516001600160401b0390811685529186528284208454845160a081018652925190931682526001810154828801526060808a0151838601528083019590955283518085018552895188015187168082526080808c0151928a019283528651998a01919091529051888601528451808903860181529790950184529381019590955290516309b819b360e41b81529193921691639b819b3091610a0591908990600401611bd4565b610180604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611c51565b93508060010154600003610b7357825160209081015182546001600160a01b03199081166001600160a01b0392831617845591860151600184015560a0850151600284018054909316911617905560c0830151600382015560e083015160048201556101008301516103e86001600160401b039091161115610aca57600080fd5b610100830151610adc906127106120ff565b60058201805467ffffffffffffffff19166001600160401b039290921691909117905560005460208581015185519091015160405163055a6d9b60e51b815260048101929092526001600160a01b0390811660248301529091169063ab4db36090604401600060405180830381600087803b158015610b5a57600080fd5b505af1158015610b6e573d6000803e3d6000fd5b505050505b8261012001516001600160a01b031663cd0774bc84866040518363ffffffff1660e01b8152600401610ba6929190612126565b60006040518083038186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050507f78d2a71fcafab043e19f93e059dae12d27022e6cf5d2d55df924207e6a0ab29e83600001516020015184602001518660200151604051610c3e939291906001600160a01b039390931683526001600160401b03919091166020830152604082015260600190565b60405180910390a15050505b92915050565b6000818152600160205260409020546001600160a01b0316610ca257610c7581610e7e565b600082815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b50565b600081604051602001610cb8919061191b565b6040516020818303038152906040529050805181602001fd5b8215610d165781608001516000108015610cef575081608001518111155b80610d0d575081606001516000108015610d0d575080826060015111155b61088957600080fd5b81606001516000108015610d2e575081606001518111155b80610d0d575081608001516000108015610d0d5750808260800151111561088957600080fd5b60006060610d628680612234565b901c9050600084608001511315610db357608084015183610d8583612710612234565b610d8f919061224b565b1115610dae576040516378eff95d60e11b815260040160405180910390fd5b610e04565b600084608001511215610e04578360800151610dce90611efe565b612710610ddb8584612234565b610de5919061224b565b1015610e04576040516378eff95d60e11b815260040160405180910390fd5b818015610e59575063060c9913610e1f866305f5e100612234565b610e29919061224b565b8460c001511080610e59575060c08401516305f5e100610e4d63060c991388612234565b610e57919061224b565b105b15610e775760405163dbaffb0160e01b815260040160405180910390fd5b5050505050565b6000805460405163324abcfb60e21b81526004810184905282916001600160a01b03169063c92af3ec9060240161078060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612506565b60600151519392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610f5591906125f1565b6000604051808303816000865af19150503d8060008114610f92576040519150601f19603f3d011682016040523d82523d6000602084013e610f97565b606091505b5091509150818015610fc1575080511580610fc1575080806020019051810190610fc1919061260d565b610e775760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640160405180910390fd5b6040805161012081018252600060a0820181815260c0830182905260e083018290526101008301829052825260208201819052918101829052606080820192909252608081019190915260008084608001511361105457600061105a565b83608001515b90506040518060a001604052808560000151815260200185604001516001600160a01b0316815260200182815260200161109386611245565b815260200184905291505092915050565b6110ad816112e6565b6002546001600160a01b031663137c29fe611133836040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a0810182526020808401516001600160a01b031660608084019182528585015160808501529083528451840151918301919091529251909201519082015290565b6040805180820182526000808252602091820152815180830183523081529186015190820152846000015160200151856060015160405160200161117690612628565b60408051601f1981840301815260808301909152604780835290919061296e60208301396040516020016111ab929190612795565b60408051601f1981840301815260608301909152602e80835290919061294060208301396040516020016111e09291906127c4565b60408051601f198184030181529082905260808901516001600160e01b031960e089901b1683526112179695949392600401612814565b600060405180830381600087803b15801561123157600080fd5b505af1158015610e77573d6000803e3d6000fd5b600060405160200161125690612628565b604051602081830303815290604052805190602001206112798360000151611337565b83602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b61012001518c61014001516040516020016112c99c9b9a999897969594939291906128b7565b604051602081830303815290604052805190602001209050919050565b8051516001600160a01b0316301461131157604051639db8d5b160e01b815260040160405180910390fd5b805160600151421115610ca25760405163387b2e5560e11b815260040160405180910390fd5b600060405180608001604052806047815260200161296e6047913980516020918201208351848301516040808701516060808901518351978801969096526001600160a01b03948516928701929092529290911690840152608083015260a082015260c0016112c9565b6040518060e001604052806113e56040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561144d5761144d611415565b60405290565b604080519081016001600160401b038111828210171561144d5761144d611415565b60405161016081016001600160401b038111828210171561144d5761144d611415565b60405160e081016001600160401b038111828210171561144d5761144d611415565b60405160c081016001600160401b038111828210171561144d5761144d611415565b60405160a081016001600160401b038111828210171561144d5761144d611415565b60405161010081016001600160401b038111828210171561144d5761144d611415565b60405161022081016001600160401b038111828210171561144d5761144d611415565b60405161018081016001600160401b038111828210171561144d5761144d611415565b604051601f8201601f191681016001600160401b038111828210171561158f5761158f611415565b604052919050565b6001600160a01b0381168114610ca257600080fd5b80356115b781611597565b919050565b6000608082840312156115ce57600080fd5b6115d661142b565b905081356115e381611597565b815260208201356115f381611597565b80602083015250604082013560408201526060820135606082015292915050565b6001600160401b0381168114610ca257600080fd5b80356115b781611614565b60006001600160401b0382111561164d5761164d611415565b50601f01601f191660200190565b600082601f83011261166c57600080fd5b813561167f61167a82611634565b611567565b81815284602083860101111561169457600080fd5b816020850160208301376000918101602001919091529392505050565b6000604082840312156116c357600080fd5b6116cb611453565b905081356116d881611597565b815260208201356001600160401b038111156116f357600080fd5b6116ff8482850161165b565b60208301525092915050565b60008060006060848603121561172057600080fd5b83356001600160401b038082111561173757600080fd5b908501906101c0828803121561174c57600080fd5b611754611475565b61175e88846115bc565b815261176c60808401611629565b602082015261177d60a084016115ac565b604082015260c0830135606082015260e083013560808201526101006117a48185016115ac565b60a08301526101208085013560c08401526101408086013560e08501526117ce6101608701611629565b838501526117df61018087016115ac565b828501526101a08601359250848311156117f857600080fd5b6118048b84880161165b565b908401525090955050602086013591508082111561182157600080fd5b5061182e868287016116b1565b92505061183d604085016115ac565b90509250925092565b60008060006060848603121561185b57600080fd5b833561186681611597565b92506020840135915060408401356001600160401b0381111561188857600080fd5b611894868287016116b1565b9150509250925092565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015250602081015160c0830152604081015160e08301526060810151610100830152608081015161012083015260a081015161014083015260c08101516101608301525050565b6101808101610c4a828461189e565b6000806040838503121561193d57600080fd5b823561194881611597565b946020939093013593505050565b600081830361018081121561196a57600080fd5b611972611498565b915060c081121561198257600080fd5b5061198b6114ba565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a08385031215611a1f57600080fd5b82356001600160401b0380821115611a3657600080fd5b9084019060a08287031215611a4a57600080fd5b611a526114dc565b82358152602083013560208201526040830135604082015260608301356060820152608083013582811115611a8657600080fd5b611a928882860161165b565b608083015250809450505050611aab8460208501611956565b90509250929050565b60008060408385031215611ac757600080fd5b82356001600160401b0380821115611ade57600080fd5b9084019060408287031215611af257600080fd5b611afa611453565b823582811115611b0957600080fd5b611b158882860161165b565b825250602083013582811115611b2a57600080fd5b611b368882860161165b565b602083015250809450506020850135915080821115611b5457600080fd5b50611b61858286016116b1565b9150509250929050565b600060208284031215611b7d57600080fd5b5035919050565b60005b83811015611b9f578181015183820152602001611b87565b50506000910152565b60008151808452611bc0816020860160208601611b84565b601f01601f19169290920160200192915050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c0840152611c1860e0840182611ba8565b9050828103602084015260018060a01b038451168152602084015160406020830152611c476040830182611ba8565b9695505050505050565b6000818303610180811215611c6557600080fd5b611c6d611498565b60c0821215611c7b57600080fd5b611c836114ba565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b80516115b781611597565b8051600281900b81146115b757600080fd5b80516115b781611614565b600060408284031215611d4357600080fd5b611d4b611453565b9050815181526020820151602082015292915050565b600060c08284031215611d7357600080fd5b611d7b6114ba565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60008183036102a0811215611dcd57600080fd5b611dd56114ba565b835181526020840151611de781611597565b60208201526040840151611dfa81611597565b60408201526060840151611e0d81611597565b606082015260808481015190820152610200609f1983011215611e2f57600080fd5b611e376114fe565b915060a08401518252611e4c60c08501611d14565b6020830152611e5d60e08501611d14565b6040830152611e6f6101008501611d26565b6060830152611e82856101208601611d31565b6080830152611e95856101608601611d61565b60a0830152611ea8856102208601611d31565b60c0830152611ebb856102608601611d31565b60e083015260a08101919091529392505050565b600060208284031215611ee157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201611f1357611f13611ee8565b5060000390565b600060408284031215611f2c57600080fd5b611f34611453565b8251611f3f81611597565b81526020928301519281019290925250919050565b600060808284031215611f6657600080fd5b611f6e61142b565b90508151611f7b81611597565b81526020820151611f8b81611597565b80602083015250604082015160408201526060820151606082015292915050565b600082601f830112611fbd57600080fd5b8151611fcb61167a82611634565b818152846020838601011115611fe057600080fd5b611ff1826020830160208701611b84565b949350505050565b60006020828403121561200b57600080fd5b81516001600160401b038082111561202257600080fd5b908301906101c0828603121561203757600080fd5b61203f611475565b6120498684611f54565b815261205760808401611d26565b602082015261206860a08401611d09565b604082015260c0830151606082015260e0830151608082015261010061208f818501611d09565b60a08301526101208085015160c08401526101408086015160e08501526120b96101608701611d26565b838501526120ca6101808701611d09565b828501526101a08601519250848311156120e357600080fd5b6120ef89848801611fac565b9084015250909695505050505050565b6001600160401b0381811683821601908082111561211f5761211f611ee8565b5092915050565b6101a0808252835180516001600160a01b03908116848401526020820151166101c084015260408101516101e0840152606001516102008301526000905060208401516001600160401b0381166102208401525060408401516001600160a01b038116610240840152506060840151610260830152608084015161028083015260a08401516001600160a01b0381166102a08401525060c08401516102c083015260e08401516102e08301526101008401516001600160401b038116610300840152506101208401516001600160a01b038116610320840152506101408401516101c061034084015261221d610360840182611ba8565b91505061222d602083018461189e565b9392505050565b8082028115828204841417610c4a57610c4a611ee8565b60008261226857634e487b7160e01b600052601260045260246000fd5b500490565b60006080828403121561227f57600080fd5b61228761142b565b90508151815260208201516020820152604082015160408201526060820151606082015292915050565b60008183036101c08112156122c557600080fd5b6122cd6114ba565b915082516122da81611597565b825260208301516122ea81611597565b602083015260c0603f198201121561230157600080fd5b5061230a6114ba565b60408301518152606083015160208201526080830151604082015260a0830151606082015260c0830151608082015260e083015160a08201528060408301525061235883610100840161226d565b606082015261018082015160808201526101a082015160a082015292915050565b600060a0828403121561238b57600080fd5b6123936114dc565b9050815181526123a560208301611d14565b60208201526123b660408301611d14565b604082015260608201516123c981611614565b606082015260808201516123dc81611614565b608082015292915050565b600061026082840312156123fa57600080fd5b612402611521565b905061240d82611d09565b815261241b60208301611d14565b602082015261242c60408301611d14565b604082015261243d60608301611d26565b60608201526080828101519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a06124b084828501611d31565b908201526101e06124c384848301611d31565b6101c08301526102208301519082015261024090910151610200820152919050565b805180151581146115b757600080fd5b805160ff811681146115b757600080fd5b6000610780828403121561251957600080fd5b612521611544565b8251815261253160208401611d09565b602082015261254260408401611d09565b604082015261255484606085016122b1565b60608201526125678461022085016122b1565b608082015261257a846103e08501612379565b60a082015261258d8461048085016123e7565b60c082015261259f6106e08401611d09565b60e08201526125b161070084016124e5565b6101008201526125c461072084016124e5565b6101208201526125d761074084016124f5565b610140820152610760929092015161016083015250919050565b60008251612603818460208701611b84565b9190910192915050565b60006020828403121561261f57600080fd5b61222d826124e5565b690a0cae4e09ee4c8cae4560b31b81526e13dc99195c925b999bc81a5b999bcb608a1b600a8201526d1d5a5b9d0d8d081c185a5c92590b60921b60198201527f6164647265737320656e747279546f6b656e416464726573732c0000000000006027820152721a5b9d0c8d4d881d1c985919505b5bdd5b9d0b606a1b6041820152731a5b9d0c8d4d881b585c99da5b905b5bdd5b9d0b60621b6054820152701859191c995cdcc818d85b98d95b195c8b607a1b60688201527f75696e743235362074616b6550726f66697450726963652c00000000000000006079820152751d5a5b9d0c8d4d881cdd1bdc131bdcdcd41c9a58d94b60521b60918201527f75696e74363420736c697070616765546f6c6572616e63652c0000000000000060a78201527f616464726573732076616c696461746f7241646472657373000000000000000060c08201527462797465732076616c69646174696f6e446174612960581b60d882015260ed0190565b600083516127a7818460208801611b84565b8351908301906127bb818360208801611b84565b01949350505050565b71506572704f72646572207769746e6573732960701b8152600083516127f1816012850160208801611b84565b835190830190612808816012840160208801611b84565b01601201949350505050565b6000610140612837838a5180516001600160a01b03168252602090810151910152565b602089015160408401526040890151606084015261286b608084018980516001600160a01b03168252602090810151910152565b6001600160a01b03871660c084015260e08301869052610100830181905261289581840186611ba8565b90508281036101208401526128aa8185611ba8565b9998505050505050505050565b60006101808e83528d60208401526001600160401b03808e16604085015260018060a01b03808e1660608601528c60808601528b60a0860152808b1660c08601528960e08601528861010086015281881661012086015280871661014086015250508061016084015261292c81840185611ba8565b9f9e50505050505050505050505050505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f2861646472657373206d61726b65742c61646472657373207472616465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a264697066735822122094555fbb6890e1c62cb2d9304539db021cdcf074d1c71a97293dfcfe6710493864736f6c63430008130033'

type PerpMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: PerpMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class PerpMarket__factory extends ContractFactory {
  constructor(...args: PerpMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PerpMarket> {
    return super.deploy(
      _predyPool,
      permit2Address,
      overrides || {}
    ) as Promise<PerpMarket>
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      permit2Address,
      overrides || {}
    )
  }
  override attach(address: string): PerpMarket {
    return super.attach(address) as PerpMarket
  }
  override connect(signer: Signer): PerpMarket__factory {
    return super.connect(signer) as PerpMarket__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): PerpMarketInterface {
    return new utils.Interface(_abi) as PerpMarketInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpMarket {
    return new Contract(address, _abi, signerOrProvider) as PerpMarket
  }
}

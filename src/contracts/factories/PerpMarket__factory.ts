/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type { PerpMarket, PerpMarketInterface } from '../PerpMarket'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IPredyPool',
        name: 'predyPool',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'permit2Address',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'whitelistFiller',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'quoterAddress',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'CallerIsNotFiller',
    type: 'error'
  },
  {
    inputs: [],
    name: 'CallerIsNotPredyPool',
    type: 'error'
  },
  {
    inputs: [],
    name: 'DeadlinePassed',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidAveragePrice',
    type: 'error'
  },
  {
    inputs: [],
    name: 'InvalidMarket',
    type: 'error'
  },
  {
    inputs: [],
    name: 'OutOfAcceptablePriceRange',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SignerIsNotVaultOwner',
    type: 'error'
  },
  {
    inputs: [],
    name: 'SlippageTooLarge',
    type: 'error'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address'
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address'
      }
    ],
    name: 'OwnershipTransferred',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'tradeAmount',
        type: 'int256'
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'perpEntryUpdate',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtEntryUpdate',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtRebalanceEntryUpdateUnderlying',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtRebalanceEntryUpdateStable',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'perpPayoff',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtPayoff',
            type: 'int256'
          }
        ],
        indexed: false,
        internalType: 'struct IPredyPool.Payoff',
        name: 'payoff',
        type: 'tuple'
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'fee',
        type: 'int256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'closeValue',
        type: 'uint256'
      }
    ],
    name: 'PerpClosedByTPSLOrder',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'takeProfitPrice',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'stopLossPrice',
        type: 'uint256'
      }
    ],
    name: 'PerpTPSLOrderUpdated',
    type: 'event'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'trader',
        type: 'address'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'tradeAmount',
        type: 'int256'
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'perpEntryUpdate',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtEntryUpdate',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtRebalanceEntryUpdateUnderlying',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtRebalanceEntryUpdateStable',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'perpPayoff',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'sqrtPayoff',
            type: 'int256'
          }
        ],
        indexed: false,
        internalType: 'struct IPredyPool.Payoff',
        name: 'payoff',
        type: 'tuple'
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'fee',
        type: 'int256'
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'marginAmount',
        type: 'int256'
      }
    ],
    name: 'PerpTraded',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'close',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'order',
            type: 'bytes'
          },
          {
            internalType: 'bytes',
            name: 'sig',
            type: 'bytes'
          }
        ],
        internalType: 'struct IFillerMarket.SignedOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'executeOrder',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'getUserPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'takeProfitPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'stopLossPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'slippageTolerance',
            type: 'uint64'
          }
        ],
        internalType: 'struct PerpMarket.UserPosition',
        name: 'userPosition',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'vaultValue',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'oraclePrice',
            type: 'uint256'
          },
          {
            components: [
              {
                internalType: 'int256',
                name: 'feeAmountBase',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'feeAmountQuote',
                type: 'int256'
              }
            ],
            internalType: 'struct DataType.FeeAmount',
            name: 'FeeAmount',
            type: 'tuple'
          }
        ],
        internalType: 'struct IPredyPool.VaultStatus',
        name: '',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256'
          },
          {
            internalType: 'address',
            name: 'marginId',
            type: 'address'
          },
          {
            internalType: 'address',
            name: 'owner',
            type: 'address'
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'margin',
            type: 'int256'
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'pairId',
                type: 'uint256'
              },
              {
                internalType: 'int24',
                name: 'rebalanceLastTickLower',
                type: 'int24'
              },
              {
                internalType: 'int24',
                name: 'rebalanceLastTickUpper',
                type: 'int24'
              },
              {
                internalType: 'uint64',
                name: 'lastNumRebalance',
                type: 'uint64'
              },
              {
                components: [
                  {
                    internalType: 'int256',
                    name: 'amount',
                    type: 'int256'
                  },
                  {
                    internalType: 'int256',
                    name: 'entryValue',
                    type: 'int256'
                  }
                ],
                internalType: 'struct Perp.PositionStatus',
                name: 'perp',
                type: 'tuple'
              },
              {
                components: [
                  {
                    internalType: 'int256',
                    name: 'amount',
                    type: 'int256'
                  },
                  {
                    internalType: 'int256',
                    name: 'entryValue',
                    type: 'int256'
                  },
                  {
                    internalType: 'int256',
                    name: 'quoteRebalanceEntryValue',
                    type: 'int256'
                  },
                  {
                    internalType: 'int256',
                    name: 'baseRebalanceEntryValue',
                    type: 'int256'
                  },
                  {
                    internalType: 'uint256',
                    name: 'entryTradeFee0',
                    type: 'uint256'
                  },
                  {
                    internalType: 'uint256',
                    name: 'entryTradeFee1',
                    type: 'uint256'
                  }
                ],
                internalType: 'struct Perp.SqrtPositionStatus',
                name: 'sqrtPerp',
                type: 'tuple'
              },
              {
                components: [
                  {
                    internalType: 'int256',
                    name: 'positionAmount',
                    type: 'int256'
                  },
                  {
                    internalType: 'uint256',
                    name: 'lastFeeGrowth',
                    type: 'uint256'
                  }
                ],
                internalType: 'struct ScaledAsset.UserStatus',
                name: 'basePosition',
                type: 'tuple'
              },
              {
                components: [
                  {
                    internalType: 'int256',
                    name: 'positionAmount',
                    type: 'int256'
                  },
                  {
                    internalType: 'uint256',
                    name: 'lastFeeGrowth',
                    type: 'uint256'
                  }
                ],
                internalType: 'struct ScaledAsset.UserStatus',
                name: 'stablePosition',
                type: 'tuple'
              }
            ],
            internalType: 'struct Perp.UserStatus',
            name: 'openPosition',
            type: 'tuple'
          }
        ],
        internalType: 'struct DataType.Vault',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'bytes',
            name: 'extraData',
            type: 'bytes'
          }
        ],
        internalType: 'struct IPredyPool.TradeParams',
        name: 'tradeParams',
        type: 'tuple'
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    name: 'predyTradeAfterCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'entryTokenAddress',
            type: 'address'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'takeProfitPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'stopLossPrice',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'slippageTolerance',
            type: 'uint64'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct PerpOrder',
        name: 'perpOrder',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'quoteExecuteOrder',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address'
      }
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'updateQuoteTokenMap',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newWhitelistFiller',
        type: 'address'
      }
    ],
    name: 'updateWhitelistFiller',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      },
      {
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      }
    ],
    name: 'userPositions',
    outputs: [
      {
        internalType: 'uint256',
        name: 'vaultId',
        type: 'uint256'
      },
      {
        internalType: 'uint256',
        name: 'takeProfitPrice',
        type: 'uint256'
      },
      {
        internalType: 'uint256',
        name: 'stopLossPrice',
        type: 'uint256'
      },
      {
        internalType: 'uint64',
        name: 'slippageTolerance',
        type: 'uint64'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [],
    name: 'whitelistFiller',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const

const _bytecode =
  '0x60e060405260016003553480156200001657600080fd5b50604051620033f6380380620033f68339810160408190526200003991620000d9565b6001600160a01b038416608052600080546001600160a01b031916339081178255604051869285928592909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b03938416179055811660a0529390931660c052506200014192505050565b6001600160a01b0381168114620000d657600080fd5b50565b60008060008060808587031215620000f057600080fd5b8451620000fd81620000c0565b60208601519094506200011081620000c0565b60408601519093506200012381620000c0565b60608601519092506200013681620000c0565b939692955090935050565b60805160a05160c051613231620001c560003960006115430152600081816102d301526107b90152600081816103590152818161047501528181610511015281816105fd015281816108be0152818161097201528181610a2701528181610b2301528181610b5801528181610d6e01528181610efe015261134401526132316000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063944b560b11610071578063944b560b146101ab5780639a962592146101be578063a966d863146101d1578063e1c951ca146101e4578063ea2f788c146101f7578063f2fde38b1461020a57600080fd5b80631c88ef1e146100ae5780631e4a0938146100d9578063366f8278146100f95780635e1b4d991461010e5780638da5cb5b14610180575b600080fd5b6100c16100bc366004611b18565b61021d565b6040516100d093929190611c5b565b60405180910390f35b6100ec6100e7366004611f41565b6103da565b6040516100d09190611fe8565b61010c61010736600461206f565b61073b565b005b61015761011c366004611b18565b60046020908152600092835260408084209091529082529020805460018201546002830154600390930154919290916001600160401b031684565b604080519485526020850193909352918301526001600160401b031660608201526080016100d0565b600054610193906001600160a01b031681565b6040516001600160a01b0390911681526020016100d0565b61010c6101b936600461223b565b6108b3565b61010c6101cc3660046122e4565b610c05565b6100ec6101df366004612301565b610c70565b61010c6101f23660046123a1565b611060565b600154610193906001600160a01b031681565b61010c6102183660046122e4565b6110b5565b610251604051806080016040528060008152602001600081526020016000815260200160006001600160401b031681525090565b61025961192a565b610261611973565b6001600160a01b038581166000908152600460208181526040808420898552825292839020835160808101855281548082526001830154938201939093526002820154818601526003909101546001600160401b031660608201529251630382bbf160e51b81529182015290945084917f000000000000000000000000000000000000000000000000000000000000000016906370577e209060240160c0604051808303816000875af115801561031c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034091906123ea565b8451604051632500ed8d60e21b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639403b634906024016102a060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd91906124bf565b9250925092509250925092565b6103e26119c4565b6003546001146104265760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b60026003556001600160a01b03841660009081526004602090815260408083208684529091529020805461045957600080fd5b8054604051632500ed8d60e21b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639403b634916104ac9160040190815260200190565b6102a060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee91906124bf565b60a08101515160405163acfcd9fd60e01b815260048101919091529091506000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063acfcd9fd90602401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906125d5565b60a083015160809081015151604080519283018152865483526001870154602084015260028701549083015260038601546001600160401b031660608301529192506105d4916000129083611149565b6040805160a0808201835284018051518252855460208301525160800151516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639b819b3092919082019061063290612604565b81526020018560a0015160a001516000015161064d90612604565b8152602001604051806060016040528060018081111561066f5761066f612620565b81526020018c6001600160a01b0316815260200160008152506040516020016106989190612636565b604051602081830303815290604052815250876040518363ffffffff1660e01b81526004016106c89291906126d1565b610180604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c919061274e565b600384015490945061072c90829086906001600160401b031660006111cc565b50506001600355509392505050565b6040805160a081018252602084810180516001600160401b03908116845286518301516001600160a01b03908116600090815260048086528782209451909316815292845285832054848601526060808901518688015285018390528551938401865282845260808501939093529351630a20b62d60e21b815290937f000000000000000000000000000000000000000000000000000000000000000090921692632882d8b4926107ee928791016126d1565b610180604051808303816000875af115801561080e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610832919061274e565b90508261010001516001600160a01b031663edb1dc8284606001516000866101200151856040518563ffffffff1660e01b81526004016108759493929190612806565b60006040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b505050506108ae816112f5565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108fc57604051637542ed5d60e11b815260040160405180910390fd5b60008260800151806020019051810190610916919061283f565b905060006109278460000151611321565b905082606001516000148061094e575060018251600181111561094c5761094c612620565b145b15610b06576020840151604051632500ed8d60e21b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639403b634916109a99160040190815260200190565b6102a060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb91906124bf565b6080810151602085015160405163031adb4d60e61b8152600160048201526001600160a01b0391821660248201526044810183905292935090917f00000000000000000000000000000000000000000000000000000000000000009091169063c6b6d34090606401600060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b5060019250610a8e915050565b84516001811115610aa157610aa1612620565b03610aff57600054865160408089015188518983015192516001600160a01b03909516947fe356daf15d40a7a07eace64dfd48864a300e2d8890b940601c52f7f02bb1806694610af6949093929188906128ad565b60405180910390a25b5050610bff565b60408201516000811315610b4d57610b486001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836113bc565b610bfd565b6000811215610bfd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c6b6d3406001856020015184610b9690612604565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b505050505b505b50505050565b6000546001600160a01b03163314610c4e5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161041d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610c786119c4565b600354600114610cb75760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b604482015260640161041d565b600260035582518051600091610cd59181016020908101910161297b565b90506000610ce782866020015161143d565b9050610d0482602001516001600160401b031683604001516114ec565b610d0d81611538565b81516020908101516001600160a01b0316600090815260048252604080822083860180516001600160401b03908116855291855291909220855190930151905160a086015160c087015160e0880151610d6c95879594169291906116f9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639b819b306040518060a0016040528086602001516001600160401b03168152602001846000015481526020018660600151815260200160008152602001604051806060016040528060006001811115610df257610df2612620565b815288516020908101516001600160a01b03168183015260808a01516040928301529051610e21929101612636565b604051602081830303815290604052815250876040518363ffffffff1660e01b8152600401610e519291906126d1565b610180604051808303816000875af1158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e95919061274e565b9350600084606001511315610ecf576001546001600160a01b03163314610ecf57604051638173c76360e01b815260040160405180910390fd5b8054600003610f765760208085015180835584519091015160405163055a6d9b60e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263ab4db36092610f43926004019182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050505b8261010001516001600160a01b031663edb1dc8284606001516000866101200151886040518563ffffffff1660e01b8152600401610fb79493929190612806565b60006040518083038186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050508260000151602001516001600160a01b03167f277e45667cbd2f61560d202fb1126d11738a3ac13619e5ebed6157c1287c384f84602001518660200151866060015188600001518960400151896080015160405161104a96959493929190612a6d565b60405180910390a2505050600160035592915050565b6000818152600260205260409020546001600160a01b03166110b25761108581611321565b600082815260026020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b50565b6000546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161041d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b821561118e5781604001516000108015611167575081604001518111155b80611185575081602001516000108015611185575080826020015111155b6108ae57600080fd5b816020015160001080156111a6575081602001518111155b80611185575081604001516000108015611185575080826040015111156108ae57600080fd5b600060606111da8680612aaf565b901c905083608001516000036112035760405163cb78a88f60e01b815260040160405180910390fd5b60008460800151131561124357608084015161121f82856117a4565b111561123e576040516378eff95d60e11b815260040160405180910390fd5b611287565b60008460800151121561128757836080015161125e90612604565b61126882856117c5565b1015611287576040516378eff95d60e11b815260040160405180910390fd5b6000821180156112d75750816112a1866305f5e100612aaf565b6112ab9190612ac6565b8460c0015110806112d7575060c08401516305f5e1006112cb8488612aaf565b6112d59190612ac6565b105b15610bfd5760405163dbaffb0160e01b815260040160405180910390fd5b6000816040516020016113089190611fe8565b6040516020818303038152906040529050805181602001fd5b60405163324abcfb60e21b81526004810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c92af3ec9060240161078060405180830381865afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190612d81565b60600151519392505050565b600060405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610bff5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161041d565b6040805161012081018252600060a0820181815260c0830182905260e083018290526101008301829052825260208201819052918101829052606080820192909252608081019190915260008084608001511361149b5760006114a1565b83608001515b90506040518060a001604052808560000151815260200185604001516001600160a01b031681526020018281526020016114da866117d5565b81526020018490529150505b92915050565b6000828152600260205260409020546001600160a01b03161580159061152b57506000828152600260205260409020546001600160a01b038281169116145b61153457600080fd5b5050565b6115418161186f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663137c29fe6115e5836040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a0810182526020808401516001600160a01b031660608084019182528585015160808501529083528451840151918301919091529251909201519082015290565b604080518082018252600080825260209182015281518083018352308152918601519082015284600001516020015185606001516040518060800160405280604781526020016131b56047913960405160200161164190612e6c565b60408051601f198184030181529082905261165f9291602001612fbf565b60408051601f1981840301815260608301909152602e8083529091906131876020830139604051602001611694929190612fee565b60408051601f198184030181529082905260808901516001600160e01b031960e089901b1683526116cb969594939260040161303e565b600060405180830381600087803b1580156116e557600080fd5b505af1158015610bfd573d6000803e3d6000fd5b620f42406001600160401b038216111561171257600080fd5b600186018390556002860182905561172d620f4240826130e1565b60038701805467ffffffffffffffff19166001600160401b039290921691909117905560408051858152602081018590529081018390526001600160a01b038616907f64f874a98ce2dae24d4bc0c9c95217d482616d28ac9f17c84295cd740221c08f9060600160405180910390a2505050505050565b6000816117b4620f424085612aaf565b6117be9190612ac6565b9392505050565b6000620f42406117b48385612aaf565b60006040516020016117e690612e6c565b6040516020818303038152906040528051906020012061180983600001516118c0565b83602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b61012001516040516020016118529b9a99989796959493929190613108565b604051602081830303815290604052805190602001209050919050565b8051516001600160a01b0316301461189a57604051639db8d5b160e01b815260040160405180910390fd5b8051606001514211156110b25760405163387b2e5560e11b815260040160405180910390fd5b60006040518060800160405280604781526020016131b56047913980516020918201208351848301516040808701516060808901518351978801969096526001600160a01b03948516928701929092529290911690840152608083015260a082015260c001611852565b6040518060a001604052806000815260200160008152602001600081526020016000815260200161196e604051806040016040528060008152602001600081525090565b905290565b6040518060c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200161196e611a38565b6040518060e00160405280611a086040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161010081018252600080825260208083018290528284018290526060830182905283518085019094528184528301529060808201908152602001611aaf6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001611ad1604051806040016040528060008152602001600081525090565b815260200161196e604051806040016040528060008152602001600081525090565b6001600160a01b03811681146110b257600080fd5b8035611b1381611af3565b919050565b60008060408385031215611b2b57600080fd5b8235611b3681611af3565b946020939093013593505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b80518252602081015160018060a01b03808216602085015280604084015116604085015280606084015116606085015250506080810151608083015260a0810151805160a0840152602081015160020b60c0840152604081015160020b60e08401526001600160401b036060820151166101008401526080810151611c1161012085018280518252602090810151910152565b5060a0810151611c25610160850182611b44565b5060c0810151805161022085015260208101516102408501525060e0015180516102608401526020810151610280840152505050565b60006103e0820190508451825260208501516020830152604085015160408301526001600160401b03606086015116606083015283516080830152602084015160a0830152604084015160c0830152606084015160e08301526080840151611cd161010084018280518252602090810151910152565b50611ce0610140830184611b7e565b949350505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611d2057611d20611ce8565b60405290565b604051608081016001600160401b0381118282101715611d2057611d20611ce8565b60405161014081016001600160401b0381118282101715611d2057611d20611ce8565b60405160e081016001600160401b0381118282101715611d2057611d20611ce8565b60405160c081016001600160401b0381118282101715611d2057611d20611ce8565b60405160a081016001600160401b0381118282101715611d2057611d20611ce8565b60405161010081016001600160401b0381118282101715611d2057611d20611ce8565b60405161022081016001600160401b0381118282101715611d2057611d20611ce8565b60405161018081016001600160401b0381118282101715611d2057611d20611ce8565b604051601f8201601f191681016001600160401b0381118282101715611e6257611e62611ce8565b604052919050565b60006001600160401b03821115611e8357611e83611ce8565b50601f01601f191660200190565b600082601f830112611ea257600080fd5b8135611eb5611eb082611e6a565b611e3a565b818152846020838601011115611eca57600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215611ef957600080fd5b611f01611cfe565b90508135611f0e81611af3565b815260208201356001600160401b03811115611f2957600080fd5b611f3584828501611e91565b60208301525092915050565b600080600060608486031215611f5657600080fd5b8335611f6181611af3565b92506020840135915060408401356001600160401b03811115611f8357600080fd5b611f8f86828701611ee7565b9150509250925092565b611fa4828251611b44565b602081015160c0830152604081015160e08301526060810151610100830152608081015161012083015260a081015161014083015260c08101516101608301525050565b61018081016114e68284611f99565b60006080828403121561200957600080fd5b612011611d26565b9050813561201e81611af3565b8152602082013561202e81611af3565b80602083015250604082013560408201526060820135606082015292915050565b6001600160401b03811681146110b257600080fd5b8035611b138161204f565b6000806040838503121561208257600080fd5b82356001600160401b038082111561209957600080fd5b908401906101a082870312156120ae57600080fd5b6120b6611d48565b6120c08784611ff7565b81526120ce60808401612064565b60208201526120df60a08401611b08565b604082015260c0830135606082015260e083013560808201526101008084013560a08301526101208085013560c084015261211d6101408601612064565b60e084015261212f6101608601611b08565b8284015261018085013591508382111561214857600080fd5b61215489838701611e91565b90830152509350602085013591508082111561216f57600080fd5b5061217c85828601611ee7565b9150509250929050565b600081830361018081121561219a57600080fd5b6121a2611d6b565b915060c08112156121b257600080fd5b506121bb611d8d565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a0838503121561224f57600080fd5b82356001600160401b038082111561226657600080fd5b9084019060a0828703121561227a57600080fd5b612282611daf565b823581526020830135602082015260408301356040820152606083013560608201526080830135828111156122b657600080fd5b6122c288828601611e91565b6080830152508094505050506122db8460208501612186565b90509250929050565b6000602082840312156122f657600080fd5b81356117be81611af3565b6000806040838503121561231457600080fd5b82356001600160401b038082111561232b57600080fd5b908401906040828703121561233f57600080fd5b612347611cfe565b82358281111561235657600080fd5b61236288828601611e91565b82525060208301358281111561237757600080fd5b61238388828601611e91565b60208301525080945050602085013591508082111561216f57600080fd5b6000602082840312156123b357600080fd5b5035919050565b6000604082840312156123cc57600080fd5b6123d4611cfe565b9050815181526020820151602082015292915050565b600060c082840312156123fc57600080fd5b612404611daf565b8251815260208301516020820152604083015160408201526060830151606082015261243384608085016123ba565b60808201529392505050565b8051611b1381611af3565b8051600281900b8114611b1357600080fd5b8051611b138161204f565b600060c0828403121561247957600080fd5b612481611d8d565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60008183036102a08112156124d357600080fd5b6124db611d8d565b8351815260208401516124ed81611af3565b6020820152604084015161250081611af3565b6040820152606084015161251381611af3565b606082015260808481015190820152610200609f198301121561253557600080fd5b61253d611dd1565b915060a0840151825261255260c0850161244a565b602083015261256360e0850161244a565b6040830152612575610100850161245c565b60608301526125888561012086016123ba565b608083015261259b856101608601612467565b60a08301526125ae8561022086016123ba565b60c08301526125c18561026086016123ba565b60e083015260a08101919091529392505050565b6000602082840312156125e757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201612619576126196125ee565b5060000390565b634e487b7160e01b600052602160045260246000fd5b815160608201906002811061265b57634e487b7160e01b600052602160045260246000fd5b82526020838101516001600160a01b031690830152604092830151929091019190915290565b60005b8381101561269c578181015183820152602001612684565b50506000910152565b600081518084526126bd816020860160208601612681565b601f01601f19169290920160200192915050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c084015261271560e08401826126a5565b9050828103602084015260018060a01b03845116815260208401516040602083015261274460408301826126a5565b9695505050505050565b600081830361018081121561276257600080fd5b61276a611d6b565b60c082121561277857600080fd5b612780611d8d565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b60006101e0868352856020840152806040840152612826818401866126a5565b9150506128366060830184611f99565b95945050505050565b60006060828403121561285157600080fd5b604051606081018181106001600160401b038211171561287357612873611ce8565b60405282516002811061288557600080fd5b8152602083015161289581611af3565b60208201526040928301519281019290925250919050565b8581526020810185905261014081016128c96040830186611b44565b61010082019390935261012001529392505050565b6000608082840312156128f057600080fd5b6128f8611d26565b9050815161290581611af3565b8152602082015161291581611af3565b80602083015250604082015160408201526060820151606082015292915050565b600082601f83011261294757600080fd5b8151612955611eb082611e6a565b81815284602083860101111561296a57600080fd5b611ce0826020830160208701612681565b60006020828403121561298d57600080fd5b81516001600160401b03808211156129a457600080fd5b908301906101a082860312156129b957600080fd5b6129c1611d48565b6129cb86846128de565b81526129d96080840161245c565b60208201526129ea60a0840161243f565b604082015260c0830151606082015260e083015160808201526101008084015160a08301526101208085015160c0840152612a28610140860161245c565b60e0840152612a3a610160860161243f565b82840152610180850151915083821115612a5357600080fd5b612a5f88838701612936565b908301525095945050505050565b6001600160401b038716815260208101869052604081018590526101608101612a996060830186611b44565b6101208201939093526101400152949350505050565b80820281158282048414176114e6576114e66125ee565b600082612ae357634e487b7160e01b600052601260045260246000fd5b500490565b600060808284031215612afa57600080fd5b612b02611d26565b90508151815260208201516020820152604082015160408201526060820151606082015292915050565b60008183036101c0811215612b4057600080fd5b612b48611d8d565b91508251612b5581611af3565b82526020830151612b6581611af3565b602083015260c0603f1982011215612b7c57600080fd5b50612b85611d8d565b60408301518152606083015160208201526080830151604082015260a0830151606082015260c0830151608082015260e083015160a082015280604083015250612bd3836101008401612ae8565b606082015261018082015160808201526101a082015160a082015292915050565b600060a08284031215612c0657600080fd5b612c0e611daf565b905081518152612c206020830161244a565b6020820152612c316040830161244a565b60408201526060820151612c448161204f565b60608201526080820151612c578161204f565b608082015292915050565b60006102608284031215612c7557600080fd5b612c7d611df4565b9050612c888261243f565b8152612c966020830161244a565b6020820152612ca76040830161244a565b6040820152612cb86060830161245c565b60608201526080828101519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a0612d2b848285016123ba565b908201526101e0612d3e848483016123ba565b6101c08301526102208301519082015261024090910151610200820152919050565b80518015158114611b1357600080fd5b805160ff81168114611b1357600080fd5b60006107808284031215612d9457600080fd5b612d9c611e17565b82518152612dac6020840161243f565b6020820152612dbd6040840161243f565b6040820152612dcf8460608501612b2c565b6060820152612de2846102208501612b2c565b6080820152612df5846103e08501612bf4565b60a0820152612e08846104808501612c62565b60c0820152612e1a6106e0840161243f565b60e0820152612e2c6107008401612d60565b610100820152612e3f6107208401612d60565b610120820152612e526107408401612d70565b610140820152610760929092015161016083015250919050565b690a0cae4e09ee4c8cae4560b31b81526e13dc99195c925b999bc81a5b999bcb608a1b600a8201526d1d5a5b9d0d8d081c185a5c92590b60921b60198201527f6164647265737320656e747279546f6b656e416464726573732c0000000000006027820152721a5b9d0c8d4d881d1c985919505b5bdd5b9d0b606a1b6041820152731a5b9d0c8d4d881b585c99da5b905b5bdd5b9d0b60621b60548201527f75696e743235362074616b6550726f66697450726963652c00000000000000006068820152751d5a5b9d0c8d4d881cdd1bdc131bdcdcd41c9a58d94b60521b60808201527f75696e74363420736c697070616765546f6c6572616e63652c0000000000000060968201527f616464726573732076616c696461746f7241646472657373000000000000000060af8201527462797465732076616c69646174696f6e446174612960581b60c782015260dc0190565b60008351612fd1818460208801612681565b835190830190612fe5818360208801612681565b01949350505050565b71506572704f72646572207769746e6573732960701b81526000835161301b816012850160208801612681565b835190830190613032816012840160208801612681565b01601201949350505050565b6000610140613061838a5180516001600160a01b03168252602090810151910152565b6020890151604084015260408901516060840152613095608084018980516001600160a01b03168252602090810151910152565b6001600160a01b03871660c084015260e0830186905261010083018190526130bf818401866126a5565b90508281036101208401526130d481856126a5565b9998505050505050505050565b6001600160401b03818116838216019080821115613101576131016125ee565b5092915050565b60006101608d83528c60208401526001600160401b03808d16604085015260018060a01b03808d1660608601528b60808601528a60a08601528960c08601528860e0860152818816610100860152808716610120860152505080610140840152613174818401856126a5565b9e9d505050505050505050505050505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f2861646472657373206d61726b65742c61646472657373207472616465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a2646970667358221220d8d0f60dab1c26f9c34b21d9e20e59ba9547130ce823347a37b9351dc13f507164736f6c63430008130033'

type PerpMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: PerpMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class PerpMarket__factory extends ContractFactory {
  constructor(...args: PerpMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    whitelistFiller: PromiseOrValue<string>,
    quoterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PerpMarket> {
    return super.deploy(
      predyPool,
      permit2Address,
      whitelistFiller,
      quoterAddress,
      overrides || {}
    ) as Promise<PerpMarket>
  }
  override getDeployTransaction(
    predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    whitelistFiller: PromiseOrValue<string>,
    quoterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      predyPool,
      permit2Address,
      whitelistFiller,
      quoterAddress,
      overrides || {}
    )
  }
  override attach(address: string): PerpMarket {
    return super.attach(address) as PerpMarket
  }
  override connect(signer: Signer): PerpMarket__factory {
    return super.connect(signer) as PerpMarket__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): PerpMarketInterface {
    return new utils.Interface(_abi) as PerpMarketInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpMarket {
    return new Contract(address, _abi, signerOrProvider) as PerpMarket
  }
}

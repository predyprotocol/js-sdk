/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { PredictMarket, PredictMarketInterface } from "../PredictMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPredyPool",
        name: "_predyPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "permit2Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotFiller",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerIsNotPredyPool",
    type: "error",
  },
  {
    inputs: [],
    name: "CloseBeforeExpiration",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "OutOfAcceptablePriceRange",
    type: "error",
  },
  {
    inputs: [],
    name: "SignerIsNotVaultOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageTooLarge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "closeValue",
        type: "uint256",
      },
    ],
    name: "Closed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "Opened",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "close",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
        ],
        internalType: "struct IFillerMarket.SignedOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "executeOrder",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pairId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "tradeAmount",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "tradeAmountSqrt",
            type: "int256",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct IPredyPool.TradeParams",
        name: "tradeParams",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "",
        type: "tuple",
      },
    ],
    name: "predyTradeAfterCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pairId",
        type: "uint256",
      },
    ],
    name: "updateQuoteTokenMap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
    ],
    name: "userPositions",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type PredictMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredictMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredictMarket__factory extends ContractFactory {
  constructor(...args: PredictMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PredictMarket> {
    return super.deploy(
      _predyPool,
      permit2Address,
      overrides || {}
    ) as Promise<PredictMarket>;
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      permit2Address,
      overrides || {}
    );
  }
  override attach(address: string): PredictMarket {
    return super.attach(address) as PredictMarket;
  }
  override connect(signer: Signer): PredictMarket__factory {
    return super.connect(signer) as PredictMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredictMarketInterface {
    return new utils.Interface(_abi) as PredictMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredictMarket {
    return new Contract(address, _abi, signerOrProvider) as PredictMarket;
  }
}

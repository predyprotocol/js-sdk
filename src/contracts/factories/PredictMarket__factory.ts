/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { PredictMarket, PredictMarketInterface } from "../PredictMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPredyPool",
        name: "_predyPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "permit2Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotFiller",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerIsNotPredyPool",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "OutOfAcceptablePriceRange",
    type: "error",
  },
  {
    inputs: [],
    name: "SignerIsNotVaultOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageTooLarge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
    ],
    name: "Traded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "close",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
        ],
        internalType: "struct IFillerMarket.SignedOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
    ],
    name: "executeOrder",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pairId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "tradeAmount",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "tradeAmountSqrt",
            type: "int256",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct IPredyPool.TradeParams",
        name: "tradeParams",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "perpEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtEntryUpdate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateUnderlying",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtRebalanceEntryUpdateStable",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "perpPayoff",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "sqrtPayoff",
                type: "int256",
              },
            ],
            internalType: "struct IPredyPool.Payoff",
            name: "payoff",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "fee",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minMargin",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "averagePrice",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "sqrtTwap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sqrtPrice",
            type: "uint256",
          },
        ],
        internalType: "struct IPredyPool.TradeResult",
        name: "",
        type: "tuple",
      },
    ],
    name: "predyTradeAfterCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "trader",
                type: "address",
              },
              {
                internalType: "address",
                name: "filler",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "pairId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "duration",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "entryTokenAddress",
            type: "address",
          },
          {
            internalType: "int256",
            name: "tradeAmount",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "tradeAmountSqrt",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "marginAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "validatorAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "validationData",
            type: "bytes",
          },
        ],
        internalType: "struct PredictOrder",
        name: "predictOrder",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "settlementContractAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedData",
            type: "bytes",
          },
        ],
        internalType: "struct ISettlement.SettlementData",
        name: "settlementData",
        type: "tuple",
      },
      {
        internalType: "contract PredyPoolQuoter",
        name: "quoter",
        type: "address",
      },
    ],
    name: "quoteExecuteOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pairId",
        type: "uint256",
      },
    ],
    name: "updateQuoteTokenMap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultId",
        type: "uint256",
      },
    ],
    name: "userPositions",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620027d4380380620027d483398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b61270680620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063108e17b0146100675780631e7f13701461007c578063333c6a3d146100d3578063944b560b146100f3578063a966d86314610106578063e1c951ca14610119575b600080fd5b61007a610075366004611451565b61012c565b005b6100af61008a366004611579565b600360205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100e66100e1366004611592565b6101ff565b6040516100ca9190611655565b61007a610101366004611719565b61045f565b6100e66101143660046117c2565b61062f565b61007a610127366004611579565b6109a4565b6000816001600160a01b0316632882d8b46040518060a0016040528087604001516001600160401b03168152602001876020015181526020018760a0015181526020018760c00151815260200160405180602001604052806000815250815250856040518363ffffffff1660e01b81526004016101aa9291906118bf565b610180604051808303816000875af11580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee919061193c565b90506101f9816109f9565b50505050565b6102076110f6565b600083815260036020526040902060018101541580159061022c575042816001015411155b61023557600080fd5b60008054604051632500ed8d60e21b8152600481018790526001600160a01b0390911690639403b634906024016102a060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190611aa4565b6000546040805160a0808201835284018051518252602082018a90525160800151519394506001600160a01b0390921692639b819b3092918201906102e890611bd0565b81526020018460a0015160a001516000015161030390611bd0565b8152602001604051806040016040528060018081111561032557610325611bec565b8152600060209182015260405161033d929101611c02565b604051602081830303815290604052815250866040518363ffffffff1660e01b815260040161036d9291906118bf565b610180604051808303816000875af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b1919061193c565b60005460a08301515160405163acfcd9fd60e01b8152929550610450926001600160a01b039092169163acfcd9fd916103f09160040190815260200190565b602060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190611c3b565b84610440856001015442610a25565b60a0808601510151511515610aca565b50600060019091015592915050565b6000546001600160a01b0316331461048a57604051637542ed5d60e11b815260040160405180910390fd5b600082608001518060200190518101906104a49190611c54565b90506000815160018111156104bb576104bb611bec565b036104ee576104e96104d08460000151610bf4565b60005460208401516001600160a01b0390911690610c6f565b505050565b60018151600181111561050357610503611bec565b036104e957600080546020850151604051632500ed8d60e21b81526001600160a01b0390921691639403b634916105409160040190815260200190565b6102a060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611aa4565b600054608082015160405163031adb4d60e61b81526001600482015230602482015260448101919091529192506001600160a01b03169063c6b6d34090606401600060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b505050506101f96106048560000151610bf4565b60208087015160009081526003909152604090205460808401516001600160a01b0390911690610c6f565b6106376110f6565b600083600001518060200190518101906106519190611d42565b90506000610663828660200151610d6c565b6040808401516001600160401b03166000908152600160205220549091506001600160a01b031661069357600080fd5b6040808301516001600160401b031660009081526001602052205460808301516001600160a01b039081169116146106ca57600080fd5b6106d381610e08565b600080546040805160a08082018352868301516001600160401b0316825260208088015181840152908701518284015260c087015160608301528251808401845294855260e08701518582015291516001600160a01b0390931693639b819b309391926080840192610746929101611c02565b604051602081830303815290604052815250866040518363ffffffff1660e01b81526004016107769291906118bf565b610180604051808303816000875af1158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba919061193c565b925081602001516000036108a65781516020908101518482015160009081526003909252604090912080546001600160a01b0319166001600160a01b039092169190911790556060820151610818906001600160401b031642611e35565b60208481018051600090815260038352604080822060010194909455549051855190920151925163055a6d9b60e51b815260048101929092526001600160a01b039283166024830152919091169063ab4db36090604401600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506108eb565b60208084015160009081526003825260409020548351909101516001600160a01b039081169116146108eb5760405163708c545360e01b815260040160405180910390fd5b8161010001516001600160a01b0316630180b58383856040518363ffffffff1660e01b815260040161091e929190611e48565b60006040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b5050835160209081015186820151604080516001600160a01b039093168352928201527fe39122fcaa92bc902344d31c0f322ba04506be819fd20dafb197b26bf2e9045d935001905060405180910390a150505b92915050565b6000818152600160205260409020546001600160a01b03166109f6576109c981610bf4565b600082815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b50565b600081604051602001610a0c9190611655565b6040516020818303038152906040529050805181602001fd5b6000828211610a4257610a3b600a612710611e35565b905061099e565b60006104b0610a518585611f4c565b610a5d90612710611f5f565b610a679190611f76565b9050612710811115610a8857610a8060c8612710611e35565b91505061099e565b612710610a97600a60c8611f4c565b610aa19083611f5f565b610aab9190611f76565b610ab690600a611e35565b610ac290612710611e35565b949350505050565b60006060610ad88680611f5f565b901c9050600084608001511315610b2957608084015183610afb83612710611f5f565b610b059190611f76565b1115610b24576040516378eff95d60e11b815260040160405180910390fd5b610b7a565b600084608001511215610b7a578360800151610b4490611bd0565b612710610b518584611f5f565b610b5b9190611f76565b1015610b7a576040516378eff95d60e11b815260040160405180910390fd5b818015610bcf575063060c9913610b95866305f5e100611f5f565b610b9f9190611f76565b8460c001511080610bcf575060c08401516305f5e100610bc363060c991388611f5f565b610bcd9190611f76565b105b15610bed5760405163dbaffb0160e01b815260040160405180910390fd5b5050505050565b6000805460405163324abcfb60e21b81526004810184905282916001600160a01b03169063c92af3ec9060240161074060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c63919061224b565b60600151519392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610ccb9190612336565b6000604051808303816000865af19150503d8060008114610d08576040519150601f19603f3d011682016040523d82523d6000602084013e610d0d565b606091505b5091509150818015610d37575080511580610d37575080806020019051810190610d379190612352565b610bed5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640160405180910390fd5b6040805161014081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905282526020820181905291810182905260608082019290925260808101919091526040518060a001604052808460000151815260200184608001516001600160a01b031681526020018460e001518152602001610df985610fa1565b81526020019290925250919050565b610e118161103b565b6002546001600160a01b031663137c29fe610e8f836040805160a0808201835260006060808401828152608080860184905290855260208086018490529486019290925284519283018552858401516001600160a01b0316838201908152868601518484015283528551015192820192909252925101519082015290565b60408051808201825260008082526020918201528151808301835230815291860151908201528460000151602001518560600151604051602001610ed29061236d565b60408051601f1981840301815260808301909152604780835290919061268a6020830139604051602001610f079291906124b4565b60408051601f1981840301815260608301909152602e80835290919061265c6020830139604051602001610f3c9291906124e3565b60408051601f198184030181529082905260808901516001600160e01b031960e089901b168352610f739695949392600401612536565b600060405180830381600087803b158015610f8d57600080fd5b505af1158015610bed573d6000803e3d6000fd5b6000604051602001610fb29061236d565b60405160208183030381529060405280519060200120610fd5836000015161108c565b83602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b610120015160405160200161101e9b9a999897969594939291906125d9565b604051602081830303815290604052805190602001209050919050565b8051516001600160a01b0316301461106657604051639db8d5b160e01b815260040160405180910390fd5b8051608001514211156109f65760405163387b2e5560e11b815260040160405180910390fd5b600060405180608001604052806047815260200161268a6047913980516020918201208351848301516060860151608087015160405161101e96019485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b6040518060e0016040528061113a6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156111a2576111a261116a565b60405290565b604080519081016001600160401b03811182821017156111a2576111a261116a565b60405161014081016001600160401b03811182821017156111a2576111a261116a565b60405160e081016001600160401b03811182821017156111a2576111a261116a565b60405160c081016001600160401b03811182821017156111a2576111a261116a565b60405161010081016001600160401b03811182821017156111a2576111a261116a565b60405161022081016001600160401b03811182821017156111a2576111a261116a565b60405161018081016001600160401b03811182821017156111a2576111a261116a565b604051601f8201601f191681016001600160401b03811182821017156112c2576112c261116a565b604052919050565b6001600160a01b03811681146109f657600080fd5b80356112ea816112ca565b919050565b600060a0828403121561130157600080fd5b611309611180565b90508135611316816112ca565b81526020820135611326816112ca565b60208201526040820135611339816112ca565b80604083015250606082013560608201526080820135608082015292915050565b6001600160401b03811681146109f657600080fd5b80356112ea8161135a565b60006001600160401b038211156113935761139361116a565b50601f01601f191660200190565b600082601f8301126113b257600080fd5b81356113c56113c08261137a565b61129a565b8181528460208386010111156113da57600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561140957600080fd5b6114116111a8565b9050813561141e816112ca565b815260208201356001600160401b0381111561143957600080fd5b611445848285016113a1565b60208301525092915050565b60008060006060848603121561146657600080fd5b83356001600160401b038082111561147d57600080fd5b908501906101c0828803121561149257600080fd5b61149a6111ca565b6114a488846112ef565b815260a083013560208201526114bc60c0840161136f565b60408201526114cd60e0840161136f565b60608201526101006114e08185016112df565b60808301526101208085013560a084015261014085013560c084015261016085013560e084015261151461018086016112df565b828401526101a085013591508382111561152d57600080fd5b6115398a8387016113a1565b90830152509450602086013591508082111561155457600080fd5b50611561868287016113f7565b925050611570604085016112df565b90509250925092565b60006020828403121561158b57600080fd5b5035919050565b600080604083850312156115a557600080fd5b8235915060208301356001600160401b038111156115c257600080fd5b6115ce858286016113f7565b9150509250929050565b8051805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015250602081015160c0830152604081015160e08301526060810151610100830152608081015161012083015260a081015161014083015260c08101516101608301525050565b610180810161099e82846115d8565b600081830361018081121561167857600080fd5b6116806111ed565b915060c081121561169057600080fd5b5061169961120f565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a0838503121561172d57600080fd5b82356001600160401b038082111561174457600080fd5b9084019060a0828703121561175857600080fd5b611760611180565b8235815260208301356020820152604083013560408201526060830135606082015260808301358281111561179457600080fd5b6117a0888286016113a1565b6080830152508094505050506117b98460208501611664565b90509250929050565b600080604083850312156117d557600080fd5b82356001600160401b03808211156117ec57600080fd5b908401906040828703121561180057600080fd5b6118086111a8565b82358281111561181757600080fd5b611823888286016113a1565b82525060208301358281111561183857600080fd5b611844888286016113a1565b60208301525080945050602085013591508082111561186257600080fd5b506115ce858286016113f7565b60005b8381101561188a578181015183820152602001611872565b50506000910152565b600081518084526118ab81602086016020860161186f565b601f01601f19169290920160200192915050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c084015261190360e0840182611893565b9050828103602084015260018060a01b0384511681526020840151604060208301526119326040830182611893565b9695505050505050565b600081830361018081121561195057600080fd5b6119586111ed565b60c082121561196657600080fd5b61196e61120f565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b80516112ea816112ca565b8051600281900b81146112ea57600080fd5b80516112ea8161135a565b600060408284031215611a2e57600080fd5b611a366111a8565b9050815181526020820151602082015292915050565b600060c08284031215611a5e57600080fd5b611a6661120f565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60008183036102a0811215611ab857600080fd5b611ac061120f565b835181526020840151611ad2816112ca565b60208201526040840151611ae5816112ca565b60408201526060840151611af8816112ca565b606082015260808481015190820152610200609f1983011215611b1a57600080fd5b611b22611231565b915060a08401518252611b3760c085016119ff565b6020830152611b4860e085016119ff565b6040830152611b5a6101008501611a11565b6060830152611b6d856101208601611a1c565b6080830152611b80856101608601611a4c565b60a0830152611b93856102208601611a1c565b60c0830152611ba6856102608601611a1c565b60e083015260a08101919091529392505050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201611be557611be5611bba565b5060000390565b634e487b7160e01b600052602160045260246000fd5b8151604082019060028110611c2757634e487b7160e01b600052602160045260246000fd5b808352506020830151602083015292915050565b600060208284031215611c4d57600080fd5b5051919050565b600060408284031215611c6657600080fd5b611c6e6111a8565b825160028110611c7d57600080fd5b81526020928301519281019290925250919050565b600060a08284031215611ca457600080fd5b611cac611180565b90508151611cb9816112ca565b81526020820151611cc9816112ca565b60208201526040820151611cdc816112ca565b80604083015250606082015160608201526080820151608082015292915050565b600082601f830112611d0e57600080fd5b8151611d1c6113c08261137a565b818152846020838601011115611d3157600080fd5b610ac282602083016020870161186f565b600060208284031215611d5457600080fd5b81516001600160401b0380821115611d6b57600080fd5b908301906101c08286031215611d8057600080fd5b611d886111ca565b611d928684611c92565b815260a08301516020820152611daa60c08401611a11565b6040820152611dbb60e08401611a11565b6060820152610100611dce8185016119f4565b60808301526101208085015160a084015261014085015160c084015261016085015160e0840152611e0261018086016119f4565b828401526101a0850151915083821115611e1b57600080fd5b611e2788838701611cfd565b908301525095945050505050565b8082018082111561099e5761099e611bba565b6101a0808252835180516001600160a01b0390811684840152602082015181166101c08501526040820151166101e084015260608101516102008401526080015161022083015260009050602084015161024083015260408401516001600160401b0381166102608401525060608401516001600160401b0381166102808401525060808401516001600160a01b0381166102a08401525060a08401516102c083015260c08401516102e083015260e08401516103008301526101008401516001600160a01b038116610320840152506101208401516101c0610340840152611f35610360840182611893565b915050611f4560208301846115d8565b9392505050565b8181038181111561099e5761099e611bba565b808202811582820484141761099e5761099e611bba565b600082611f9357634e487b7160e01b600052601260045260246000fd5b500490565b600060808284031215611faa57600080fd5b604051608081018181106001600160401b0382111715611fcc57611fcc61116a565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60008183036101c081121561201157600080fd5b61201961120f565b91508251612026816112ca565b82526020830151612036816112ca565b602083015260c0603f198201121561204d57600080fd5b5061205661120f565b60408301518152606083015160208201526080830151604082015260a0830151606082015260c0830151608082015260e083015160a0820152806040830152506120a4836101008401611f98565b606082015261018082015160808201526101a082015160a082015292915050565b6000606082840312156120d757600080fd5b604051606081018181106001600160401b03821117156120f9576120f961116a565b6040528251815290508061210f602084016119ff565b6020820152612120604084016119ff565b60408201525092915050565b6000610260828403121561213f57600080fd5b612147611254565b9050612152826119f4565b8152612160602083016119ff565b6020820152612171604083016119ff565b604082015261218260608301611a11565b60608201526080828101519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a06121f584828501611a1c565b908201526101e061220884848301611a1c565b6101c08301526102208301519082015261024090910151610200820152919050565b805180151581146112ea57600080fd5b805160ff811681146112ea57600080fd5b6000610740828403121561225e57600080fd5b612266611277565b82518152612276602084016119f4565b6020820152612287604084016119f4565b60408201526122998460608501611ffd565b60608201526122ac846102208501611ffd565b60808201526122bf846103e085016120c5565b60a08201526122d284610440850161212c565b60c08201526122e46106a084016119f4565b60e08201526122f66106c0840161222a565b6101008201526123096106e0840161222a565b61012082015261231c610700840161223a565b610140820152610720929092015161016083015250919050565b6000825161234881846020870161186f565b9190910192915050565b60006020828403121561236457600080fd5b611f458261222a565b6c0a0e4cac8d2c6e89ee4c8cae45609b1b81526e13dc99195c925b999bc81a5b999bcb608a1b600d820152721d5a5b9d0c8d4d881c1bdcda5d1a5bdb92590b606a1b601c8201526d1d5a5b9d0d8d081c185a5c92590b60921b602f8201526f1d5a5b9d0d8d08191d5c985d1a5bdb8b60821b603d8201527f6164647265737320656e747279546f6b656e416464726573732c000000000000604d820152721a5b9d0c8d4d881d1c985919505b5bdd5b9d0b606a1b60678201527f696e74323536207472616465416d6f756e74537172742c000000000000000000607a820152741d5a5b9d0c8d4d881b585c99da5b905b5bdd5b9d0b605a1b60918201527f616464726573732076616c696461746f7241646472657373000000000000000060a68201527462797465732076616c69646174696f6e446174612960581b60be82015260d30190565b600083516124c681846020880161186f565b8351908301906124da81836020880161186f565b01949350505050565b74507265646963744f72646572207769746e6573732960581b81526000835161251381601585016020880161186f565b83519083019061252a81601584016020880161186f565b01601501949350505050565b6000610140612559838a5180516001600160a01b03168252602090810151910152565b602089015160408401526040890151606084015261258d608084018980516001600160a01b03168252602090810151910152565b6001600160a01b03871660c084015260e0830186905261010083018190526125b781840186611893565b90508281036101208401526125cc8185611893565b9998505050505050505050565b8b8152602081018b9052604081018a90526001600160401b038981166060830152881660808201526001600160a01b0387811660a083015260c0820187905260e0820186905261010082018590528316610120820152610160610140820181905260009061264983820185611893565b9e9d505050505050505050505050505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f2861646472657373206d61726b65742c61646472657373207472616465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529a2646970667358221220552c3006fcaf2cc24706fa8184dfae06a85a8e279600cd416922438b43c0545064736f6c63430008130033";

type PredictMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredictMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredictMarket__factory extends ContractFactory {
  constructor(...args: PredictMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PredictMarket> {
    return super.deploy(
      _predyPool,
      permit2Address,
      overrides || {}
    ) as Promise<PredictMarket>;
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    permit2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      permit2Address,
      overrides || {}
    );
  }
  override attach(address: string): PredictMarket {
    return super.attach(address) as PredictMarket;
  }
  override connect(signer: Signer): PredictMarket__factory {
    return super.connect(signer) as PredictMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredictMarketInterface {
    return new utils.Interface(_abi) as PredictMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredictMarket {
    return new Contract(address, _abi, signerOrProvider) as PredictMarket;
  }
}

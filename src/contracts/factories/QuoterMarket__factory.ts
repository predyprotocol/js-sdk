/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type { QuoterMarket, QuoterMarketInterface } from '../QuoterMarket'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IPredyPool',
        name: '_predyPool',
        type: 'address'
      },
      {
        internalType: 'address',
        name: 'revertSettlement',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [],
    name: 'CallerIsNotPredyPool',
    type: 'error'
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'pairId',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'bytes',
            name: 'extraData',
            type: 'bytes'
          }
        ],
        internalType: 'struct IPredyPool.TradeParams',
        name: '',
        type: 'tuple'
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    name: 'predyTradeAfterCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'positionId',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'marginRatio',
            type: 'uint256'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct GeneralOrder',
        name: 'order',
        type: 'tuple'
      }
    ],
    name: 'quoteBaseAmountDelta',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'market',
                type: 'address'
              },
              {
                internalType: 'address',
                name: 'trader',
                type: 'address'
              },
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256'
              }
            ],
            internalType: 'struct OrderInfo',
            name: 'info',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'positionId',
            type: 'uint256'
          },
          {
            internalType: 'uint64',
            name: 'pairId',
            type: 'uint64'
          },
          {
            internalType: 'int256',
            name: 'tradeAmount',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'tradeAmountSqrt',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'marginAmount',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'marginRatio',
            type: 'uint256'
          },
          {
            internalType: 'address',
            name: 'validatorAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'validationData',
            type: 'bytes'
          }
        ],
        internalType: 'struct GeneralOrder',
        name: 'order',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'settlementContractAddress',
            type: 'address'
          },
          {
            internalType: 'bytes',
            name: 'encodedData',
            type: 'bytes'
          }
        ],
        internalType: 'struct ISettlement.SettlementData',
        name: 'settlementData',
        type: 'tuple'
      }
    ],
    name: 'quoteTrade',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'int256',
                name: 'perpEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtEntryUpdate',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateUnderlying',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtRebalanceEntryUpdateStable',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'perpPayoff',
                type: 'int256'
              },
              {
                internalType: 'int256',
                name: 'sqrtPayoff',
                type: 'int256'
              }
            ],
            internalType: 'struct IPredyPool.Payoff',
            name: 'payoff',
            type: 'tuple'
          },
          {
            internalType: 'uint256',
            name: 'vaultId',
            type: 'uint256'
          },
          {
            internalType: 'int256',
            name: 'fee',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'minMargin',
            type: 'int256'
          },
          {
            internalType: 'int256',
            name: 'averagePrice',
            type: 'int256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtTwap',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'sqrtPrice',
            type: 'uint256'
          }
        ],
        internalType: 'struct IPredyPool.TradeResult',
        name: 'tradeResult',
        type: 'tuple'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  }
] as const

const _bytecode =
  '0x608060405234801561001057600080fd5b50604051610bd9380380610bd983398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610b18806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806302c195e8146100465780637e953d8b1461006f578063944b560b14610090575b600080fd5b610059610054366004610672565b6100a5565b604051610066919061072c565b60405180910390f35b61008261007d3660046107b4565b6101b1565b604051908152602001610066565b6100a361009e3660046108a5565b6102ce565b005b6100ad61037b565b600080546040805160a081018252868201516001600160401b0316815260208088015181830152606080890151838501526080808a0151918401919091528351918201845294815293810193909352516309b819b360e41b81526001600160a01b0390911691639b819b309161012891908690600401610994565b610180604051808303816000875af1925050508015610164575060408051601f3d908101601f1916820190925261016191810190610a11565b60015b6101a9573d808015610192576040519150601f19603f3d011682016040523d82523d6000602084013e610197565b606091505b506101a181610325565b9150506101ab565b505b92915050565b600080546040805160a081018252848201516001600160401b031681526020808601518183015260608087015183850152608080880151918401919091528351808301855286815290830152825180840184526001546001600160a01b039081168252845180840186528781529282019290925292516309b819b360e41b8152931692639b819b30926102479291600401610994565b610180604051808303816000875af1925050508015610283575060408051601f3d908101601f1916820190925261028091810190610a11565b60015b6102c7573d8080156102b1576040519150601f19603f3d011682016040523d82523d6000602084013e6102b6565b606091505b506102c081610353565b9392505050565b505b919050565b6000546001600160a01b031633146102f957604051637542ed5d60e11b815260040160405180910390fd5b60008160405160200161030c919061072c565b6040516020818303038152906040529050805181602001fd5b61032d61037b565b60c08251101561033f57815182602001fd5b818060200190518101906101ab9190610a11565b600060c08251101561036757815182602001fd5b818060200190518101906101ab9190610ac9565b6040518060e001604052806103bf6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715610428576104286103ef565b60405290565b60405160e081016001600160401b0381118282101715610428576104286103ef565b60405160c081016001600160401b0381118282101715610428576104286103ef565b60405160a081016001600160401b0381118282101715610428576104286103ef565b80356001600160a01b03811681146102c957600080fd5b6000608082840312156104bd57600080fd5b604051608081018181106001600160401b03821117156104df576104df6103ef565b6040529050806104ee83610494565b81526104fc60208401610494565b602082015260408301356040820152606083013560608201525092915050565b80356001600160401b03811681146102c957600080fd5b600082601f83011261054457600080fd5b81356001600160401b038082111561055e5761055e6103ef565b604051601f8301601f19908116603f01168101908282118183101715610586576105866103ef565b8160405283815286602085880101111561059f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061018082840312156105d257600080fd5b6105da610405565b90506105e683836104ab565b8152608082013560208201526105fe60a0830161051c565b604082015260c0820135606082015260e082013560808201526101008083013560a083015261012083013560c083015261063b6101408401610494565b60e08301526101608301356001600160401b0381111561065a57600080fd5b61066685828601610533565b82840152505092915050565b6000806040838503121561068557600080fd5b82356001600160401b038082111561069c57600080fd5b6106a8868387016105bf565b935060208501359150808211156106be57600080fd5b90840190604082870312156106d257600080fd5b6040516040810181811083821117156106ed576106ed6103ef565b6040526106f983610494565b815260208301358281111561070d57600080fd5b61071988828601610533565b6020830152508093505050509250929050565b6000610180820190508251805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015250602083015160c0830152604083015160e08301526060830151610100830152608083015161012083015260a083015161014083015260c083015161016083015292915050565b6000602082840312156107c657600080fd5b81356001600160401b038111156107dc57600080fd5b6107e8848285016105bf565b949350505050565b600081830361018081121561080457600080fd5b61080c61042e565b915060c081121561081c57600080fd5b50610825610450565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528082525060c0820135602082015260e082013560408201526101008201356060820152610120820135608082015261014082013560a082015261016082013560c082015292915050565b6000806101a083850312156108b957600080fd5b82356001600160401b03808211156108d057600080fd5b9084019060a082870312156108e457600080fd5b6108ec610472565b8235815260208301356020820152604083013560408201526060830135606082015260808301358281111561092057600080fd5b61092c88828601610533565b60808301525080945050505061094584602085016107f0565b90509250929050565b6000815180845260005b8181101561097457602081850181015186830182015201610958565b506000602082860101526020601f19601f83011685010191505092915050565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c08401526109d860e084018261094e565b9050828103602084015260018060a01b038451168152602084015160406020830152610a07604083018261094e565b9695505050505050565b6000818303610180811215610a2557600080fd5b610a2d61042e565b60c0821215610a3b57600080fd5b610a43610450565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015281815260c0840151602082015260e084015160408201526101008401516060820152610120840151608082015261014084015160a082015261016084015160c0820152809250505092915050565b600060208284031215610adb57600080fd5b505191905056fea2646970667358221220e7c3f831426d85105f58cd8aa382cccc54590b96a300b0098cd0de56116b5b9464736f6c63430008130033'

type QuoterMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: QuoterMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class QuoterMarket__factory extends ContractFactory {
  constructor(...args: QuoterMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _predyPool: PromiseOrValue<string>,
    revertSettlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<QuoterMarket> {
    return super.deploy(
      _predyPool,
      revertSettlement,
      overrides || {}
    ) as Promise<QuoterMarket>
  }
  override getDeployTransaction(
    _predyPool: PromiseOrValue<string>,
    revertSettlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _predyPool,
      revertSettlement,
      overrides || {}
    )
  }
  override attach(address: string): QuoterMarket {
    return super.attach(address) as QuoterMarket
  }
  override connect(signer: Signer): QuoterMarket__factory {
    return super.connect(signer) as QuoterMarket__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): QuoterMarketInterface {
    return new utils.Interface(_abi) as QuoterMarketInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): QuoterMarket {
    return new Contract(address, _abi, signerOrProvider) as QuoterMarket
  }
}
